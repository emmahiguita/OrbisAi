package com.example.orbisai.ai

import com.example.orbisai.data.repository.TransactionRepository
import kotlinx.coroutines.flow.first
import javax.inject.Inject
import javax.inject.Singleton

/**
 * OrbisAIAgent - Agente de IA especializado en an√°lisis financiero
 * Preparado para integraci√≥n con KOOG AI Framework de JetBrains
 * Actualmente en modo de desarrollo - funcionalidad b√°sica disponible
 */
@Suppress("unused")
@Singleton
class OrbisAIAgent @Inject constructor(
    private val transactionRepository: TransactionRepository
) {
    
    private val apiKey = System.getenv("OPENAI_API_KEY") ?: ""
    
    private val agent by lazy {
        if (apiKey.isNotEmpty()) {
            try {
                // TODO: Implementar con KOOG AI cuando est√© disponible
                // AIAgent(
                //     executor = simpleOpenAIExecutor(apiKey),
                //     systemPrompt = buildSystemPrompt(),
                //     llmModel = OpenAIModels.Chat.GPT4o
                // )
                null
            } catch (e: Exception) {
                null
            }
        } else null
    }
    
    /**
     * Procesa consultas financieras con contexto de datos reales
     */
    suspend fun processFinancialQuery(query: String): String {
        return try {
            // Obtener contexto financiero real
            val context = buildFinancialContext()
            
            // Respuesta simulada basada en el contexto
            when {
                query.contains("tendencia", ignoreCase = true) -> analyzeTrendsSimulated(context)
                query.contains("recomendaci√≥n", ignoreCase = true) -> generateRecommendationsSimulated(context)
                query.contains("balance", ignoreCase = true) -> generateBalanceAnalysis(context)
                else -> generateGeneralAnalysis(query, context)
            }
        } catch (e: Exception) {
            "‚ùå Error procesando consulta: ${e.localizedMessage}"
        }
    }
    
    /**
     * Analiza tendencias financieras con datos reales
     */
    suspend fun analyzeTrends(): String {
        val context = buildFinancialContext()
        return analyzeTrendsSimulated(context)
    }
    
    /**
     * Genera recomendaciones personalizadas
     */
    suspend fun generateRecommendations(): String {
        val context = buildFinancialContext()
        return generateRecommendationsSimulated(context)
    }
    
    /**
     * Construye contexto financiero con datos reales
     */
    private suspend fun buildFinancialContext(): String {
        return try {
            val transactions = transactionRepository.getAllTransactions().first()
            val invoices = transactionRepository.getAllInvoices().first()
            
            val totalIncome = transactions.filter { it.type.name == "INCOME" }.sumOf { it.amount }
            val totalExpenses = transactions.filter { it.type.name == "EXPENSE" }.sumOf { it.amount }
            val balance = totalIncome - totalExpenses
            
            val pendingInvoices = invoices.filter { it.status.name == "PENDING" }
            val overdueInvoices = invoices.filter { it.status.name == "OVERDUE" }
            
            """
            üìä RESUMEN FINANCIERO ACTUAL:
            ‚Ä¢ Total de transacciones: ${transactions.size}
            ‚Ä¢ Ingresos totales: ${"$%.2f".format(totalIncome)}
            ‚Ä¢ Gastos totales: ${"$%.2f".format(totalExpenses)}
            ‚Ä¢ Balance actual: ${"$%.2f".format(balance)}
            ‚Ä¢ Facturas pendientes: ${pendingInvoices.size} (${"$%.2f".format(pendingInvoices.sumOf { it.totalAmount })})
            ‚Ä¢ Facturas vencidas: ${overdueInvoices.size} (${"$%.2f".format(overdueInvoices.sumOf { it.totalAmount })})
            
            üìà CATEGOR√çAS PRINCIPALES:
            ${transactions.groupBy { it.category }.map { (category, txs) -> 
                "‚Ä¢ $category: ${txs.size} transacciones, ${"$%.2f".format(txs.sumOf { it.amount })}"
            }.joinToString("\n")}
            """.trimIndent()
        } catch (e: Exception) {
            "‚ùå Error obteniendo contexto financiero: ${e.localizedMessage}"
        }
    }
    
    /**
     * Prompt del sistema optimizado
     */
    private fun buildSystemPrompt(): String {
        return """
        Eres ORBIS AI, un asistente financiero experto especializado en an√°lisis empresarial.
        
        COMPETENCIAS PRINCIPALES:
        ‚Ä¢ An√°lisis financiero profundo y estrat√©gico
        ‚Ä¢ Interpretaci√≥n de datos contables y transaccionales
        ‚Ä¢ Generaci√≥n de insights accionables
        ‚Ä¢ Identificaci√≥n de riesgos y oportunidades
        ‚Ä¢ Optimizaci√≥n de flujos de caja y rentabilidad
        
        ESTILO DE RESPUESTA:
        ‚Ä¢ Profesional pero accesible
        ‚Ä¢ Espec√≠fico y basado en datos
        ‚Ä¢ Estructura clara con bullet points
        ‚Ä¢ Ejemplos pr√°cticos cuando sea √∫til
        ‚Ä¢ Recomendaciones priorizadas
        
        FORMATO DE SALIDA:
        ‚Ä¢ Usa emojis relevantes (üìä üìà üí∞ ‚ö†Ô∏è ‚úÖ)
        ‚Ä¢ Organiza en secciones claras
        ‚Ä¢ Incluye m√©tricas espec√≠ficas
        ‚Ä¢ Proporciona pr√≥ximos pasos concretos
        
        CONTEXTO: OrbisAI es una plataforma empresarial integral que gestiona finanzas, RRHH, ventas y operaciones.
        """.trimIndent()
    }
    
    // Funciones simuladas para an√°lisis financiero
    private fun analyzeTrendsSimulated(context: String): String {
        return """
        üìà AN√ÅLISIS DE TENDENCIAS FINANCIERAS
        
        $context
        
        üîç INSIGHTS PRINCIPALES:
        ‚Ä¢ Las transacciones muestran un patr√≥n de crecimiento estable
        ‚Ä¢ Se observa una distribuci√≥n equilibrada entre ingresos y gastos
        ‚Ä¢ Las categor√≠as principales mantienen consistencia mensual
        
        ‚ö†Ô∏è ALERTAS:
        ‚Ä¢ Monitorear facturas vencidas para evitar problemas de liquidez
        ‚Ä¢ Revisar gastos recurrentes para optimizaci√≥n
        
        üìä RECOMENDACIONES:
        1. Implementar seguimiento semanal de m√©tricas clave
        2. Establecer alertas autom√°ticas para facturas vencidas
        3. Revisar categorizaci√≥n de transacciones para mejor an√°lisis
        """.trimIndent()
    }
    
    private fun generateRecommendationsSimulated(context: String): String {
        return """
        üí° RECOMENDACIONES ESTRAT√âGICAS
        
        $context
        
        üéØ RECOMENDACIONES PRIORITARIAS:
        1. **Optimizaci√≥n de Flujo de Caja**
           ‚Ä¢ Implementar cobranza autom√°tica para facturas pendientes
           ‚Ä¢ Negociar mejores t√©rminos de pago con proveedores
        
        2. **Control de Gastos**
           ‚Ä¢ Revisar gastos recurrentes mensualmente
           ‚Ä¢ Implementar aprobaciones para gastos mayores
        
        3. **Crecimiento Sostenible**
           ‚Ä¢ Identificar fuentes de ingresos m√°s rentables
           ‚Ä¢ Diversificar cartera de clientes
        
        üìà PR√ìXIMOS PASOS:
        ‚Ä¢ Revisar m√©tricas semanalmente
        ‚Ä¢ Implementar dashboard de KPIs
        ‚Ä¢ Establecer reuniones de revisi√≥n financiera mensual
        """.trimIndent()
    }
    
    private fun generateBalanceAnalysis(context: String): String {
        return """
        üí∞ AN√ÅLISIS DE BALANCE
        
        $context
        
        üìä ESTADO ACTUAL:
        ‚Ä¢ Balance general: Positivo con tendencia estable
        ‚Ä¢ Liquidez: Adecuada para operaciones normales
        ‚Ä¢ Solvencia: Mantiene ratios saludables
        
        üîç OBSERVACIONES:
        ‚Ä¢ Los ingresos cubren adecuadamente los gastos operativos
        ‚Ä¢ Se mantiene reserva para contingencias
        ‚Ä¢ La estructura financiera es sostenible
        
        ‚úÖ CONCLUSIONES:
        ‚Ä¢ Estado financiero saludable
        ‚Ä¢ Capacidad de crecimiento sostenible
        ‚Ä¢ Gesti√≥n de riesgo adecuada
        """.trimIndent()
    }
    
    private fun generateGeneralAnalysis(query: String, context: String): String {
        return """
        ü§ñ AN√ÅLISIS FINANCIERO GENERAL
        
        Consulta: $query
        
        $context
        
        üìã RESUMEN:
        ‚Ä¢ Estado financiero: Estable y saludable
        ‚Ä¢ Capacidad operativa: Adecuada
        ‚Ä¢ Perspectivas: Positivas con oportunidades de mejora
        
        üí° SUGERENCIAS:
        ‚Ä¢ Continuar monitoreo regular de m√©tricas
        ‚Ä¢ Implementar mejoras en procesos de cobranza
        ‚Ä¢ Mantener enfoque en optimizaci√≥n de costos
        
        üîÑ PR√ìXIMAS ACCIONES:
        ‚Ä¢ Revisar an√°lisis detallado de categor√≠as
        ‚Ä¢ Implementar recomendaciones espec√≠ficas
        ‚Ä¢ Programar seguimiento de m√©tricas clave
        """.trimIndent()
    }
}
