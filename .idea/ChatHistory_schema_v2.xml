<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChatHistoryState">
    <option name="serializedSessions">
      <map>
        <entry key="60ea3abe-c2a2-44c2-956a-656b5c24acaa" value="{&quot;id&quot;:&quot;60ea3abe-c2a2-44c2-956a-656b5c24acaa&quot;,&quot;name&quot;:&quot;Analizar código de conversión de fechas en Room&quot;,&quot;timestamp&quot;:1756344557910,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\n\u003cadditional_data\u003e\nBelow are some potentially helpful/relevant pieces of information for figuring out to respond\n\u003ccurrent_file\u003e\n```kotlin:app/src/main/java/com/example/orbisai/data/local/converters/DateConverter.kt, lines\u003dALL(1-17)\npackage com.example.orbisai.data.local.converters\n\nimport androidx.room.TypeConverter\nimport java.util.Date\n\nclass DateConverter {\n    @TypeConverter\n    fun fromTimestamp(value: Long?): Date? {\n        return value?.let { Date(it) }\n    }\n\n    @TypeConverter\n    fun dateToTimestamp(date: Date?): Long? {\n        return date?.time\n    }\n}\n\n```\n\u003c/current_file\u003e\n\u003c/additional_data\u003e\n\u003cuser_query\u003e\nanaliza el codigo\n\u003c/user_query\u003e&quot;}]},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Claro, aquí tienes un análisis del código que has proporcionado:\n\nUbicación:  \n`app/src/main/java/com/example/orbisai/data/local/converters/DateConverter.kt`\n\nPropósito general:\nEl archivo define una clase llamada DateConverter que se utiliza para convertir entre el tipo Date de Java y el tipo Long (timestamp en milisegundos desde la época UNIX) para la persistencia en Room, una librería de base de datos de Android que requiere tipos de datos estándar en la base de datos.\n\nDesglose de la clase y sus métodos:\n\n1. Anotación @TypeConverter:\n   - Se usa para marcar los métodos que Room utilizará automáticamente para convertir tipos personalizados en tipos que Room puede guardar y viceversa.\n\n2. Método fromTimestamp(value: Long?): Date?\n   - Convierte un valor Long (el timestamp, en milisegundos) a un objeto Date.\n   - Si el valor es null, retorna null; si no, crea un Date con ese timestamp.\n   - Esto es útil para recuperar fechas almacenadas como enteros largos y convertirlas nuevamente en objetos Date cuando se leen desde la base de datos.\n\n3. Método dateToTimestamp(date: Date?): Long?\n   - Convierte un objeto Date a un Long (el número de milisegundos desde la época UNIX).\n   - Si el objeto Date es null, retorna null; si no, obtiene el valor en milisegundos con date.time.\n   - Esto es útil cuando necesitas guardar un objeto Date en la base de datos, convirtiéndolo a un formato numérico adecuado para las bases de datos SQL.\n\nResumen:\nEsta clase es esencial para manejar campos de tipo Date en entidades Room, ya que Room no puede almacenar directamente objetos Date y necesita una manera de serializarlos/deserializarlos a valores Long.\n\n¿Quieres que explique cómo registrar este convertidor en Room o necesitas algo más específico?&quot;}]}],&quot;draft_message&quot;:&quot;analiza el codigo, deve permitirse visualizar en&quot;}" />
        <entry key="8fdc0d6e-0884-4592-8e0c-32200bb21b73" value="{&quot;id&quot;:&quot;8fdc0d6e-0884-4592-8e0c-32200bb21b73&quot;,&quot;name&quot;:&quot;Preview Compose para FinanceScreen en Android&quot;,&quot;timestamp&quot;:1756346208580,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\n\u003cadditional_data\u003e\nBelow are some potentially helpful/relevant pieces of information for figuring out to respond\n\u003ccurrent_file\u003e\n```kotlin:app/src/main/java/com/example/orbisai/screens/FinanceScreen.kt, lines\u003dALL(1-689)\npackage com.example.orbisai.screens\n\nimport androidx.compose.animation.AnimatedVisibility\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.fadeOut\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.grid.GridCells\nimport androidx.compose.foundation.lazy.grid.LazyVerticalGrid\nimport androidx.compose.foundation.lazy.grid.items\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.automirrored.filled.ReceiptLong\nimport androidx.compose.material.icons.automirrored.filled.TrendingDown\nimport androidx.compose.material.icons.automirrored.filled.TrendingUp\nimport androidx.compose.material.icons.filled.Add\nimport androidx.compose.material.icons.filled.AttachMoney\nimport androidx.compose.material.icons.filled.BarChart\nimport androidx.compose.material.icons.filled.Clear\nimport androidx.compose.material.icons.filled.Search\nimport androidx.compose.material.icons.filled.SearchOff\nimport androidx.compose.material.icons.filled.SwapHoriz\nimport androidx.compose.material.icons.filled.Sync\nimport androidx.compose.material.icons.filled.TrendingDown\nimport androidx.compose.material.icons.filled.TrendingUp\nimport androidx.compose.material3.AlertDialog\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.CardDefaults\nimport androidx.compose.material3.CircularProgressIndicator\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.FloatingActionButton\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.RadioButton\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextButton\nimport androidx.compose.material3.TextField\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.material3.TopAppBarDefaults\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport com.example.orbisai.components.TestInfoCard\nimport com.example.orbisai.data.models.FinancialTransaction\nimport com.example.orbisai.domain.models.TransactionType\nimport com.example.orbisai.ui.components.DashboardCard\nimport com.example.orbisai.viewmodels.FinanceUiState\nimport com.example.orbisai.viewmodels.FinanceViewModel\n\n// Data class para KPIs dinámicos\nprivate data class KpiItem(\n    val title: String,\n    val value: String,\n    val icon: androidx.compose.ui.graphics.vector.ImageVector\n)\n\n// Enum para monedas soportadas\nprivate enum class Currency(val symbol: String, val code: String) {\n    COP(\&quot;$\&quot;, \&quot;COP\&quot;),    // Peso Colombiano\n    USD(\&quot;$\&quot;, \&quot;USD\&quot;),    // Dólar Estadounidense\n    EUR(\&quot;€\&quot;, \&quot;EUR\&quot;),    // Euro\n    GBP(\&quot;£\&quot;, \&quot;GBP\&quot;)     // Libra Esterlina\n}\n\n// Función para formatear moneda\nprivate fun formatCurrency(amount: Double, currency: Currency \u003d Currency.COP): String {\n    return \&quot;${currency.symbol}${amount.toInt()}\&quot;\n}\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun FinanceScreen(\n    modifier: Modifier \u003d Modifier, \n    viewModel: FinanceViewModel \u003d hiltViewModel(),\n    onNavigateToInvoices: () -\u003e Unit \u003d {},\n    onNavigateToReconciliation: () -\u003e Unit \u003d {},\n    onNavigateToReports: () -\u003e Unit \u003d {}\n) {\n    val uiState by viewModel.uiState.collectAsStateWithLifecycle()\n    var showAddDialog by remember { mutableStateOf(false) }\n    var showSearchDialog by remember { mutableStateOf(false) }\n    \n    // Usar transacciones reales del ViewModel\n    \n    Scaffold(\n        topBar \u003d {\n            TopAppBar(\n                title \u003d {\n                    Text(\n                        text \u003d \&quot;Finanzas\&quot;,\n                        style \u003d MaterialTheme.typography.titleLarge.copy(\n                            fontWeight \u003d FontWeight.Bold\n                        )\n                    )\n                },\n                actions \u003d {\n                    // Mostrar indicador de búsqueda activa\n                    if (uiState.isSearchActive) {\n                        IconButton(onClick \u003d { viewModel.clearSearch() }) {\n                            Icon(\n                                imageVector \u003d Icons.Default.Clear,\n                                contentDescription \u003d \&quot;Limpiar búsqueda\&quot;,\n                                tint \u003d MaterialTheme.colorScheme.onPrimaryContainer\n                            )\n                        }\n                    }\n                    \n                    IconButton(onClick \u003d { showSearchDialog \u003d true }) {\n                        Icon(\n                            imageVector \u003d if (uiState.isSearchActive) Icons.Default.Search else Icons.Default.Search,\n                            contentDescription \u003d \&quot;Buscar transacciones\&quot;,\n                            tint \u003d if (uiState.isSearchActive) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onPrimaryContainer\n                        )\n                    }\n                },\n                colors \u003d TopAppBarDefaults.topAppBarColors(\n                    containerColor \u003d MaterialTheme.colorScheme.primaryContainer,\n                    titleContentColor \u003d MaterialTheme.colorScheme.onPrimaryContainer,\n                    actionIconContentColor \u003d MaterialTheme.colorScheme.onPrimaryContainer\n                )\n            )\n        },\n        floatingActionButton \u003d {\n            FloatingActionButton(\n                onClick \u003d { showAddDialog \u003d true },\n                containerColor \u003d MaterialTheme.colorScheme.primary\n            ) {\n                Icon(\n                    imageVector \u003d Icons.Default.Add,\n                    contentDescription \u003d \&quot;Nuevo registro\&quot;,\n                    tint \u003d MaterialTheme.colorScheme.onPrimary\n                )\n            }\n        }\n    ) { padding -\u003e\n        when {\n            uiState.isLoading -\u003e {\n                Column(\n                    modifier \u003d Modifier\n                        .fillMaxSize()\n                        .padding(padding),\n                    horizontalAlignment \u003d Alignment.CenterHorizontally,\n                    verticalArrangement \u003d Arrangement.Center\n                ) {\n                    CircularProgressIndicator()\n                    Spacer(modifier \u003d Modifier.height(16.dp))\n                    Text(\&quot;Cargando datos financieros...\&quot;)\n                }\n            }\n            uiState.error !\u003d null -\u003e {\n                Column(\n                    modifier \u003d Modifier\n                        .fillMaxSize()\n                        .padding(padding),\n                    horizontalAlignment \u003d Alignment.CenterHorizontally,\n                    verticalArrangement \u003d Arrangement.Center\n                ) {\n                    Text(\n                        text \u003d uiState.error!!,\n                        color \u003d MaterialTheme.colorScheme.error,\n                        style \u003d MaterialTheme.typography.bodyMedium\n                    )\n                    Spacer(modifier \u003d Modifier.height(16.dp))\n                    Button(onClick \u003d { viewModel.refreshData() }) {\n                        Text(\&quot;Reintentar\&quot;)\n                    }\n                }\n            }\n            else -\u003e {\n                LazyColumn(\n                    modifier \u003d modifier\n                        .fillMaxSize()\n                        .padding(padding),\n                    contentPadding \u003d PaddingValues(16.dp),\n                    verticalArrangement \u003d Arrangement.spacedBy(16.dp)\n                ) {\n            // Información de prueba\n            item {\n                TestInfoCard(\n                    onAddTestTransaction \u003d { viewModel.addTestTransaction() },\n                    onClearData \u003d { viewModel.clearAllData() }\n                )\n            }\n            \n            // Resumen general\n            item {\n                AnimatedVisibility(\n                    visible \u003d true,\n                    enter \u003d fadeIn(),\n                    exit \u003d fadeOut()\n                ) {\n                    Card(\n                        modifier \u003d Modifier.fillMaxWidth(),\n                        shape \u003d RoundedCornerShape(24.dp),\n                        colors \u003d CardDefaults.cardColors(\n                            containerColor \u003d MaterialTheme.colorScheme.primaryContainer\n                        )\n                    ) {\n                        Column(\n                            modifier \u003d Modifier.padding(24.dp)\n                        ) {\n                            Text(\n                                text \u003d \&quot;Resumen Financiero\&quot;,\n                                style \u003d MaterialTheme.typography.titleLarge.copy(\n                                    fontWeight \u003d FontWeight.Bold\n                                ),\n                                color \u003d MaterialTheme.colorScheme.onPrimaryContainer\n                            )\n                            \n                            Spacer(modifier \u003d Modifier.height(16.dp))\n                            \n                            Row(\n                                modifier \u003d Modifier.fillMaxWidth(),\n                                horizontalArrangement \u003d Arrangement.SpaceBetween\n                            ) {\n                                SummaryItem(\n                                    label \u003d \&quot;Ingresos\&quot;,\n                                    value \u003d formatCurrency(uiState.totalIncome),\n                                    color \u003d MaterialTheme.colorScheme.primary\n                                )\n                                SummaryItem(\n                                    label \u003d \&quot;Gastos\&quot;,\n                                    value \u003d formatCurrency(uiState.totalExpenses),\n                                    color \u003d MaterialTheme.colorScheme.error\n                                )\n                                SummaryItem(\n                                    label \u003d \&quot;Balance\&quot;,\n                                    value \u003d formatCurrency(uiState.balance),\n                                    color \u003d if (uiState.balance \u003e\u003d 0) \n                                        MaterialTheme.colorScheme.tertiary \n                                    else \n                                        MaterialTheme.colorScheme.error\n                                )\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // KPIs Grid\n            item {\n                Text(\n                    text \u003d \&quot;Métricas Financieras\&quot;,\n                    style \u003d MaterialTheme.typography.titleMedium.copy(\n                        fontWeight \u003d FontWeight.SemiBold\n                    ),\n                    modifier \u003d Modifier.padding(bottom \u003d 8.dp)\n                )\n            }\n            \n            item {\n                LazyVerticalGrid(\n                    columns \u003d GridCells.Fixed(2),\n                    modifier \u003d Modifier.height(200.dp),\n                    contentPadding \u003d PaddingValues(8.dp),\n                    horizontalArrangement \u003d Arrangement.spacedBy(8.dp),\n                    verticalArrangement \u003d Arrangement.spacedBy(8.dp)\n                ) {\n                    items(getKpiItems(uiState)) { kpi -\u003e\n                        DashboardCard(\n                            item \u003d kpi.title,\n                            icon \u003d kpi.icon,\n                            value \u003d kpi.value\n                        )\n                    }\n                }\n            }\n            \n            // Navegación a sub-pantallas\n            item {\n                Text(\n                    text \u003d \&quot;Acciones Rápidas\&quot;,\n                    style \u003d MaterialTheme.typography.titleMedium.copy(\n                        fontWeight \u003d FontWeight.SemiBold\n                    ),\n                    modifier \u003d Modifier.padding(bottom \u003d 8.dp)\n                )\n            }\n            \n            item {\n                Row(\n                    modifier \u003d Modifier.fillMaxWidth(),\n                    horizontalArrangement \u003d Arrangement.spacedBy(8.dp)\n                ) {\n                    Button(\n                        onClick \u003d onNavigateToInvoices,\n                        modifier \u003d Modifier.weight(1f)\n                    ) {\n                        Icon(Icons.AutoMirrored.Filled.ReceiptLong, contentDescription \u003d null)\n                        Spacer(modifier \u003d Modifier.width(8.dp))\n                        Text(\&quot;Facturas\&quot;)\n                    }\n                    \n                    Button(\n                        onClick \u003d onNavigateToReconciliation,\n                        modifier \u003d Modifier.weight(1f)\n                    ) {\n                        Icon(Icons.Default.Sync, contentDescription \u003d null)\n                        Spacer(modifier \u003d Modifier.width(8.dp))\n                        Text(\&quot;Conciliar\&quot;)\n                    }\n                }\n            }\n            \n            item {\n                Button(\n                    onClick \u003d onNavigateToReports,\n                    modifier \u003d Modifier.fillMaxWidth()\n                ) {\n                    Icon(Icons.Default.BarChart, contentDescription \u003d null)\n                    Spacer(modifier \u003d Modifier.width(8.dp))\n                    Text(\&quot;Ver Reportes\&quot;)\n                }\n            }\n            \n            // Transacciones recientes\n            item {\n                Text(\n                    text \u003d \&quot;Transacciones Recientes\&quot;,\n                    style \u003d MaterialTheme.typography.titleMedium.copy(\n                        fontWeight \u003d FontWeight.SemiBold\n                    ),\n                    modifier \u003d Modifier.padding(bottom \u003d 8.dp)\n                )\n            }\n            \n            // Mostrar resultados de búsqueda o transacciones recientes\n            if (uiState.isSearchActive) {\n                if (uiState.filteredTransactions.isEmpty()) {\n                    item {\n                        Card(\n                            modifier \u003d Modifier.fillMaxWidth(),\n                            shape \u003d RoundedCornerShape(12.dp),\n                            colors \u003d CardDefaults.cardColors(\n                                containerColor \u003d MaterialTheme.colorScheme.surfaceVariant\n                            )\n                        ) {\n                            Column(\n                                modifier \u003d Modifier.padding(16.dp),\n                                horizontalAlignment \u003d Alignment.CenterHorizontally\n                            ) {\n                                Icon(\n                                    imageVector \u003d Icons.Default.SearchOff,\n                                    contentDescription \u003d \&quot;Sin resultados\&quot;,\n                                    modifier \u003d Modifier.size(48.dp),\n                                    tint \u003d MaterialTheme.colorScheme.onSurfaceVariant\n                                )\n                                Spacer(modifier \u003d Modifier.height(8.dp))\n                                Text(\n                                    text \u003d \&quot;No se encontraron transacciones\&quot;,\n                                    style \u003d MaterialTheme.typography.bodyMedium,\n                                    color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n                                )\n                                Text(\n                                    text \u003d \&quot;Intenta con otros términos de búsqueda\&quot;,\n                                    style \u003d MaterialTheme.typography.bodySmall,\n                                    color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n                                )\n                            }\n                        }\n                    }\n                } else {\n                    item {\n                        Text(\n                            text \u003d \&quot;Resultados de búsqueda (${uiState.filteredTransactions.size})\&quot;,\n                            style \u003d MaterialTheme.typography.titleMedium.copy(\n                                fontWeight \u003d FontWeight.SemiBold\n                            ),\n                            modifier \u003d Modifier.padding(bottom \u003d 8.dp)\n                        )\n                    }\n                    \n                    items(uiState.filteredTransactions) { transaction -\u003e\n                        TransactionItem(transaction \u003d transaction)\n                    }\n                }\n            } else {\n                items(uiState.transactions.take(5)) { transaction -\u003e\n                    TransactionItem(transaction \u003d transaction)\n                }\n            }\n                }\n            }\n        }\n        \n        // Dialog para agregar transacción\n        if (showAddDialog) {\n            AddTransactionDialog(\n                onDismiss \u003d { showAddDialog \u003d false },\n                onConfirm \u003d { amount, description, type, category -\u003e\n                    viewModel.addTransaction(description, amount, type, category)\n                    showAddDialog \u003d false\n                }\n            )\n        }\n        \n        // Dialog para buscar transacciones\n        if (showSearchDialog) {\n            SearchTransactionsDialog(\n                currentQuery \u003d uiState.searchQuery,\n                onDismiss \u003d { showSearchDialog \u003d false },\n                onSearch \u003d { query -\u003e\n                    viewModel.searchTransactions(query)\n                    showSearchDialog \u003d false\n                }\n            )\n        }\n    }\n}\n\n@Composable\nprivate fun SummaryItem(label: String, value: String, color: Color) {\n    Column(\n        horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(\n            text \u003d value,\n            style \u003d MaterialTheme.typography.titleLarge.copy(\n                fontWeight \u003d FontWeight.Bold\n            ),\n            color \u003d color\n        )\n        Text(\n            text \u003d label,\n            style \u003d MaterialTheme.typography.bodySmall,\n            color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n        )\n    }\n}\n\n@Composable\nprivate fun TransactionItem(transaction: FinancialTransaction) {\n    Card(\n        modifier \u003d Modifier.fillMaxWidth(),\n        shape \u003d RoundedCornerShape(12.dp),\n        elevation \u003d CardDefaults.cardElevation(1.dp)\n    ) {\n        Row(\n            modifier \u003d Modifier\n                .fillMaxWidth()\n                .padding(16.dp),\n            verticalAlignment \u003d Alignment.CenterVertically\n        ) {\n            Icon(\n                imageVector \u003d when (transaction.type) {\n                    TransactionType.INCOME -\u003e Icons.AutoMirrored.Filled.TrendingUp\n                    TransactionType.EXPENSE -\u003e Icons.AutoMirrored.Filled.TrendingDown\n                    TransactionType.TRANSFER -\u003e Icons.Default.SwapHoriz\n                },\n                contentDescription \u003d transaction.description,\n                modifier \u003d Modifier.size(24.dp),\n                tint \u003d when (transaction.type) {\n                    TransactionType.INCOME -\u003e MaterialTheme.colorScheme.primary\n                    TransactionType.EXPENSE -\u003e MaterialTheme.colorScheme.error\n                    TransactionType.TRANSFER -\u003e MaterialTheme.colorScheme.tertiary\n                }\n            )\n            \n            Spacer(modifier \u003d Modifier.width(12.dp))\n            \n            Column(\n                modifier \u003d Modifier.weight(1f)\n            ) {\n                Text(\n                    text \u003d transaction.description,\n                    style \u003d MaterialTheme.typography.bodyMedium.copy(\n                        fontWeight \u003d FontWeight.Medium\n                    ),\n                    color \u003d MaterialTheme.colorScheme.onSurface\n                )\n                Text(\n                    text \u003d transaction.category,\n                    style \u003d MaterialTheme.typography.bodySmall,\n                    color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n                )\n            }\n            \n            Text(\n                text \u003d \&quot;${if (transaction.type \u003d\u003d TransactionType.INCOME) \&quot;+\&quot; else \&quot;-\&quot;}${formatCurrency(transaction.amount)}\&quot;,\n                style \u003d MaterialTheme.typography.titleMedium.copy(\n                    fontWeight \u003d FontWeight.Bold\n                ),\n                color \u003d when (transaction.type) {\n                    TransactionType.INCOME -\u003e MaterialTheme.colorScheme.primary\n                    TransactionType.EXPENSE -\u003e MaterialTheme.colorScheme.error\n                    TransactionType.TRANSFER -\u003e MaterialTheme.colorScheme.tertiary\n                }\n            )\n        }\n    }\n}\n\n@Composable\nprivate fun AddTransactionDialog(\n    onDismiss: () -\u003e Unit,\n    onConfirm: (Double, String, TransactionType, String) -\u003e Unit\n) {\n    var amount by remember { mutableStateOf(\&quot;\&quot;) }\n    var description by remember { mutableStateOf(\&quot;\&quot;) }\n    var type by remember { mutableStateOf(TransactionType.INCOME) }\n    var category by remember { mutableStateOf(\&quot;General\&quot;) }\n    \n    AlertDialog(\n        onDismissRequest \u003d onDismiss,\n        title \u003d {\n            Text(\&quot;Nueva Transacción\&quot;)\n        },\n        text \u003d {\n            Column {\n                TextField(\n                    value \u003d description,\n                    onValueChange \u003d { description \u003d it },\n                    label \u003d { Text(\&quot;Descripción\&quot;) },\n                    modifier \u003d Modifier.fillMaxWidth()\n                )\n                \n                Spacer(modifier \u003d Modifier.height(8.dp))\n                \n                TextField(\n                    value \u003d amount,\n                    onValueChange \u003d { amount \u003d it },\n                    label \u003d { Text(\&quot;Monto\&quot;) },\n                    modifier \u003d Modifier.fillMaxWidth()\n                )\n                \n                Spacer(modifier \u003d Modifier.height(8.dp))\n                \n                TextField(\n                    value \u003d category,\n                    onValueChange \u003d { category \u003d it },\n                    label \u003d { Text(\&quot;Categoría\&quot;) },\n                    modifier \u003d Modifier.fillMaxWidth()\n                )\n                \n                Spacer(modifier \u003d Modifier.height(16.dp))\n                \n                Row {\n                    RadioButton(\n                        selected \u003d type \u003d\u003d TransactionType.INCOME,\n                        onClick \u003d { type \u003d TransactionType.INCOME }\n                    )\n                    Text(\&quot;Ingreso\&quot;)\n                    \n                    Spacer(modifier \u003d Modifier.width(16.dp))\n                    \n                    RadioButton(\n                        selected \u003d type \u003d\u003d TransactionType.EXPENSE,\n                        onClick \u003d { type \u003d TransactionType.EXPENSE }\n                    )\n                    Text(\&quot;Gasto\&quot;)\n                }\n            }\n        },\n        confirmButton \u003d {\n            TextButton(\n                onClick \u003d {\n                    if (description.isNotBlank() \u0026\u0026 amount.isNotBlank()) {\n                        amount.toDoubleOrNull()?.let { amountValue -\u003e\n                            if (amountValue \u003e 0) {\n                                onConfirm(amountValue, description, type, category)\n                            }\n                        }\n                    }\n                },\n                enabled \u003d description.isNotBlank() \u0026\u0026 amount.isNotBlank() \u0026\u0026 \n                         amount.toDoubleOrNull()?.let { it \u003e 0 } \u003d\u003d true\n            ) {\n                Text(\&quot;Agregar\&quot;)\n            }\n        },\n        dismissButton \u003d {\n            TextButton(onClick \u003d onDismiss) {\n                Text(\&quot;Cancelar\&quot;)\n            }\n        }\n    )\n}\n\n// Función para generar KPIs dinámicos\nprivate fun getKpiItems(uiState: FinanceUiState, currency: Currency \u003d Currency.COP): List\u003cKpiItem\u003e {\n    val margin \u003d uiState.totalIncome - uiState.totalExpenses\n    val roi \u003d if (uiState.totalExpenses \u003e 0) {\n        ((uiState.totalIncome - uiState.totalExpenses) / uiState.totalExpenses) * 100\n    } else 0.0\n    \n    return listOf(\n        KpiItem(\&quot;Ventas\&quot;, formatCurrency(uiState.totalIncome, currency), Icons.Filled.TrendingUp),\n        KpiItem(\&quot;Gastos\&quot;, formatCurrency(uiState.totalExpenses, currency), Icons.Filled.TrendingDown),\n        KpiItem(\&quot;Margen\&quot;, formatCurrency(margin, currency), Icons.Filled.AttachMoney),\n        KpiItem(\&quot;ROI\&quot;, \&quot;${roi.toInt()}%\&quot;, Icons.Filled.BarChart)\n    )\n}\n\n// Eliminada clase Transaction innecesaria - usar FinancialTransaction del ViewModel\n\n@Composable\nprivate fun SearchTransactionsDialog(\n    currentQuery: String,\n    onDismiss: () -\u003e Unit,\n    onSearch: (String) -\u003e Unit\n) {\n    var searchQuery by remember { mutableStateOf(currentQuery) }\n    \n    AlertDialog(\n        onDismissRequest \u003d onDismiss,\n        title \u003d {\n            Text(\&quot;Buscar Transacciones\&quot;)\n        },\n        text \u003d {\n            Column {\n                TextField(\n                    value \u003d searchQuery,\n                    onValueChange \u003d { searchQuery \u003d it },\n                    label \u003d { Text(\&quot;Término de búsqueda\&quot;) },\n                    placeholder \u003d { Text(\&quot;Descripción, categoría, monto...\&quot;) },\n                    modifier \u003d Modifier.fillMaxWidth(),\n                    singleLine \u003d true,\n                    leadingIcon \u003d {\n                        Icon(\n                            imageVector \u003d Icons.Default.Search,\n                            contentDescription \u003d \&quot;Buscar\&quot;\n                        )\n                    }\n                )\n                \n                Spacer(modifier \u003d Modifier.height(8.dp))\n                \n                Text(\n                    text \u003d \&quot;Busca por: descripción, categoría, monto, referencia o notas\&quot;,\n                    style \u003d MaterialTheme.typography.bodySmall,\n                    color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n                )\n            }\n        },\n        confirmButton \u003d {\n            TextButton(\n                onClick \u003d { onSearch(searchQuery) },\n                enabled \u003d searchQuery.isNotBlank()\n            ) {\n                Text(\&quot;Buscar\&quot;)\n            }\n        },\n        dismissButton \u003d {\n            TextButton(onClick \u003d onDismiss) {\n                Text(\&quot;Cancelar\&quot;)\n            }\n        }\n    )\n}\n\n// Previews para Android Studio\n@Preview(showBackground \u003d true, name \u003d \&quot;Finance Screen Preview\&quot;)\n@Composable\nfun FinanceScreenPreview() {\n    MaterialTheme {\n        FinanceScreen(\n            onNavigateToInvoices \u003d {},\n            onNavigateToReconciliation \u003d {},\n            onNavigateToReports \u003d {}\n        )\n    }\n}\n\n// Preview eliminado - usar FinancialTransaction real\n\n```\n\u003c/current_file\u003e\n\u003c/additional_data\u003e\n\u003cuser_query\u003e\nanaliza el codigo, deve permitirse visualizar  preview compose\n\u003c/user_query\u003e&quot;}]},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Después de analizar tu archivo `FinanceScreen.kt`, aquí tienes un resumen sobre el soporte para visualizar el preview de composables en Jetpack Compose:\n\n### ¿Está habilitado el Preview en tu código?\n\nSí, tu archivo incluye una función de preview bien definida:\n\n```kotlin\n@Preview(showBackground \u003d true, name \u003d \&quot;Finance Screen Preview\&quot;)\n@Composable\nfun FinanceScreenPreview() {\n    MaterialTheme {\n        FinanceScreen(\n            onNavigateToInvoices \u003d {},\n            onNavigateToReconciliation \u003d {},\n            onNavigateToReports \u003d {}\n        )\n    }\n}\n```\nEsto cumple con los requisitos para que Android Studio pueda mostrar la previsualización de tu pantalla Compose en el panel de Preview.\n\n---\n\n### Para garantizar que funcione correctamente:\n\n1. **Verifica dependencias en tu proyecto**  \n   Debes tener las dependencias necesarias de Jetpack Compose y los plugins actualizados en tu módulo (por ejemplo, en `build.gradle`):\n\n   ```gradle\n   implementation \&quot;androidx.compose.ui:ui-tooling-preview:\u003ccompose_version\u003e\&quot;\n   debugImplementation \&quot;androidx.compose.ui:ui-tooling:\u003ccompose_version\u003e\&quot;\n   ```\n\n2. **No uses funciones o dependencias que requieran contexto de dispositivo real**  \n   Tu función `FinanceScreenPreview` llama a `FinanceScreen`, que por defecto usa un `viewModel` con `hiltViewModel()`.  \n   En modo preview, eso puede fallar porque Hilt y el ViewModel no están disponibles. Debes pasarle un `viewModel` de prueba (fake/mock) o modificar la función de preview para que pueda visualizar sin un ViewModel real.\n\n   **Solución recomendada:**  \n   Modifica `FinanceScreenPreview` así:\n\n   ```kotlin\n   @Preview(showBackground \u003d true, name \u003d \&quot;Finance Screen Preview\&quot;)\n   @Composable\n   fun FinanceScreenPreview() {\n       MaterialTheme {\n           FinanceScreen(\n               viewModel \u003d FakeFinanceViewModel(), // Debes crear este ViewModel para preview\n               onNavigateToInvoices \u003d {},\n               onNavigateToReconciliation \u003d {},\n               onNavigateToReports \u003d {}\n           )\n       }\n   }\n   ```\n\n   O, si no puedes proveer un fake viewModel, sobrecarga tu composable para aceptar datos en vez de usar el ViewModel directamente.\n\n---\n\n### Resumen de ajustes para habilitar preview Compose:\n\n- El Preview está declarado correctamente.\n- Pero necesitas usar un ViewModel falso o datos estáticos para que la preview funcione sin errores en Android Studio.\n- Revisa dependencias y asegúrate de no usar parámetros que dependan de entorno externo.\n- La preview no soporta dependencias de navegación, contexto de aplicación, Hilt, etc.\n\n¿Quieres que te ayude a crear un `FakeFinanceViewModel` y modificar la preview para evitar errores y visualizar correctamente en Android Studio?&quot;}]},{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\u003cuser_query\u003e\nanaliza todo el proyetco\n\u003c/user_query\u003e&quot;}]},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;&quot;}],&quot;tool_calls&quot;:[{&quot;id&quot;:&quot;call_7F9lKHmemupr896jUP6CsPjR&quot;,&quot;type&quot;:&quot;function&quot;,&quot;function&quot;:{&quot;name&quot;:&quot;list_dir&quot;,&quot;arguments&quot;:&quot;{\&quot;target_directory\&quot;:\&quot;app/src/main/java/com/example/orbisai\&quot;}&quot;}}]},{&quot;role&quot;:&quot;tool&quot;,&quot;name&quot;:&quot;list_dir&quot;,&quot;tool_call_id&quot;:&quot;call_7F9lKHmemupr896jUP6CsPjR&quot;,&quot;content&quot;:&quot;Contents of directory:\n\n[dir] app\\src\\main\\java\\com\\example\\orbisai\\components/ - ago 25, 2025 11:58 p. m.\n[dir] app\\src\\main\\java\\com\\example\\orbisai\\data/ - ago 25, 2025 08:54 p. m.\n[dir] app\\src\\main\\java\\com\\example\\orbisai\\data\\local/ - ago 25, 2025 08:54 p. m.\n[dir] app\\src\\main\\java\\com\\example\\orbisai\\data\\models/ - ago 26, 2025 02:35 p. m.\n[dir] app\\src\\main\\java\\com\\example\\orbisai\\data\\repository/ - ago 26, 2025 01:40 p. m.\n[dir] app\\src\\main\\java\\com\\example\\orbisai\\di/ - ago 27, 2025 12:08 p. m.\n[dir] app\\src\\main\\java\\com\\example\\orbisai\\domain/ - ago 25, 2025 08:55 p. m.\n[dir] app\\src\\main\\java\\com\\example\\orbisai\\domain\\models/ - ago 27, 2025 12:44 p. m.\n[dir] app\\src\\main\\java\\com\\example\\orbisai\\domain\\usecases/ - ago 26, 2025 03:36 p. m.\n[dir] app\\src\\main\\java\\com\\example\\orbisai\\navigation/ - ago 25, 2025 04:51 p. m.\n[dir] app\\src\\main\\java\\com\\example\\orbisai\\screens/ - ago 27, 2025 08:47 p. m.\n[dir] app\\src\\main\\java\\com\\example\\orbisai\\ui/ - ago 26, 2025 12:52 p. m.\n[dir] app\\src\\main\\java\\com\\example\\orbisai\\ui\\components/ - ago 27, 2025 12:50 p. m.\n[dir] app\\src\\main\\java\\com\\example\\orbisai\\ui\\finance/ - ago 26, 2025 03:44 p. m.\n[dir] app\\src\\main\\java\\com\\example\\orbisai\\ui\\theme/ - ago 24, 2025 02:26 p. m.\n[dir] app\\src\\main\\java\\com\\example\\orbisai\\viewmodels/ - ago 26, 2025 02:16 p. m.\n[file] app\\src\\main\\java\\com\\example\\orbisai\\components\\EAButton.kt (2,5KB, 77 lines) - ago 24, 2025 12:13 p. m.\n[file] app\\src\\main\\java\\com\\example\\orbisai\\components\\EAChipRow.kt (1,8KB, 56 lines) - ago 24, 2025 01:26 p. m.\n[file] app\\src\\main\\java\\com\\example\\orbisai\\components\\EASectionHeader.kt (2,9KB, 92 lines) - ago 24, 2025 01:20 p. m.\n[file] app\\src\\main\\java\\com\\example\\orbisai\\components\\ElevatedActionCard.kt (2,7KB, 84 lines) - ago 24, 2025 12:13 p. m.\n[file] app\\src\\main\\java\\com\\example\\orbisai\\components\\EmployeeItem.kt (9,6KB, 262 lines) - ago 24, 2025 01:23 p. m.\n[file] app\\src\\main\\java\\com\\example\\orbisai\\components\\FinanceCard.kt (3,3KB, 102 lines) - ago 25, 2025 11:47 p. m.\n[file] app\\src\\main\\java\\com\\example\\orbisai\\components\\TestInfoCard.kt (4,5KB, 114 lines) - ago 25, 2025 11:59 p. m.\n[file] app\\src\\main\\java\\com\\example\\orbisai\\di\\DatabaseModule.kt (963B, 33 lines) - ago 25, 2025 08:56 p. m.\n[file] app\\src\\main\\java\\com\\example\\orbisai\\di\\RepositoryModule.kt (514B, 18 lines) - ago 26, 2025 01:40 p. m.\n[file] app\\src\\main\\java\\com\\example\\orbisai\\MainActivity.kt (4,2KB, 111 lines) - ago 27, 2025 12:39 p. m.\n[file] app\\src\\main\\java\\com\\example\\orbisai\\navigation\\NavGraph.kt (2,8KB, 87 lines) - ago 25, 2025 10:46 p. m.\n[file] app\\src\\main\\java\\com\\example\\orbisai\\OrbisApplication.kt (165B, 7 lines) - ago 25, 2025 08:56 p. m.\n[file] app\\src\\main\\java\\com\\example\\orbisai\\screens\\FinanceScreen.kt (26,8KB, 688 lines) - ago 27, 2025 08:47 p. m.\n[file] app\\src\\main\\java\\com\\example\\orbisai\\screens\\HomeScreen.kt (9,4KB, 263 lines) - ago 26, 2025 01:46 a. m.\n[file] app\\src\\main\\java\\com\\example\\orbisai\\screens\\HRScreen.kt (14,1KB, 404 lines) - ago 24, 2025 01:15 p. m.\n[file] app\\src\\main\\java\\com\\example\\orbisai\\screens\\SalesScreen.kt (14,3KB, 409 lines) - ago 24, 2025 01:30 p. m.\n[file] app\\src\\main\\java\\com\\example\\orbisai\\screens\\SettingsScreen.kt (16,8KB, 479 lines) - ago 26, 2025 03:43 p. m.\n[file] app\\src\\main\\java\\com\\example\\orbisai\\viewmodels\\FinanceViewModel.kt (27,1KB, 739 lines) - ago 27, 2025 12:48 p. m.\n[file] app\\src\\main\\java\\com\\example\\orbisai\\viewmodels\\HRViewModel.kt (2,4KB, 62 lines) - ago 24, 2025 12:43 a. m.&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;&quot;}],&quot;tool_calls&quot;:[{&quot;id&quot;:&quot;call_0OxRWCajay2kL11Ih72lJoo0&quot;,&quot;type&quot;:&quot;function&quot;,&quot;function&quot;:{&quot;name&quot;:&quot;read_file&quot;,&quot;arguments&quot;:&quot;{\&quot;target_file\&quot;: \&quot;app/src/main/java/com/example/orbisai/MainActivity.kt\&quot;}&quot;}},{&quot;id&quot;:&quot;call_XuzVsYwGm3ILLVkq8HbaVbzz&quot;,&quot;type&quot;:&quot;function&quot;,&quot;function&quot;:{&quot;name&quot;:&quot;read_file&quot;,&quot;arguments&quot;:&quot;{\&quot;target_file\&quot;: \&quot;app/src/main/java/com/example/orbisai/viewmodels/FinanceViewModel.kt\&quot;}&quot;}},{&quot;id&quot;:&quot;call_OrOqBSjFZ4wcJj8dQ1mbL9SV&quot;,&quot;type&quot;:&quot;function&quot;,&quot;function&quot;:{&quot;name&quot;:&quot;read_file&quot;,&quot;arguments&quot;:&quot;{\&quot;target_file\&quot;: \&quot;app/src/main/java/com/example/orbisai/components/TestInfoCard.kt\&quot;}&quot;}},{&quot;id&quot;:&quot;call_lZtmB5GuPsH3rD3cMWWyPG3d&quot;,&quot;type&quot;:&quot;function&quot;,&quot;function&quot;:{&quot;name&quot;:&quot;read_file&quot;,&quot;arguments&quot;:&quot;{\&quot;target_file\&quot;: \&quot;app/src/main/java/com/example/orbisai/data/models/FinancialTransaction.kt\&quot;}&quot;}},{&quot;id&quot;:&quot;call_Xekq7xQjCkHSkk64ql5kylnm&quot;,&quot;type&quot;:&quot;function&quot;,&quot;function&quot;:{&quot;name&quot;:&quot;read_file&quot;,&quot;arguments&quot;:&quot;{\&quot;target_file\&quot;: \&quot;app/src/main/java/com/example/orbisai/domain/models/TransactionType.kt\&quot;}&quot;}}]},{&quot;role&quot;:&quot;tool&quot;,&quot;name&quot;:&quot;read_file&quot;,&quot;tool_call_id&quot;:&quot;call_0OxRWCajay2kL11Ih72lJoo0&quot;,&quot;content&quot;:&quot;package com.example.orbisai\n\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.activity.OnBackPressedCallback\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.*\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Modifier\nimport androidx.navigation.NavDestination.Companion.hierarchy\nimport androidx.navigation.NavGraph.Companion.findStartDestination\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.compose.composable\nimport androidx.navigation.compose.currentBackStackEntryAsState\nimport androidx.navigation.compose.rememberNavController\nimport com.example.orbisai.screens.*\nimport com.example.orbisai.ui.theme.OrbisAITheme\nimport com.example.orbisai.ui.finance.FinanceNavHost\nimport dagger.hilt.android.AndroidEntryPoint\n\n@AndroidEntryPoint\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        \n        // Manejo robusto del botón de retroceso\n        onBackPressedDispatcher.addCallback(this, object : OnBackPressedCallback(true) {\n            override fun handleOnBackPressed() {\n                // Permitir que el sistema maneje la navegación por defecto\n                isEnabled \u003d false\n                onBackPressedDispatcher.onBackPressed()\n            }\n        })\n        \n        setContent {\n            OrbisAITheme {\n                Surface(\n                    modifier \u003d Modifier.fillMaxSize(),\n                    color \u003d MaterialTheme.colorScheme.background\n                ) {\n                    MainNavHost()\n                }\n            }\n        }\n    }\n}\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun MainNavHost(modifier: Modifier \u003d Modifier) {\n    val navController \u003d rememberNavController()\n    \n    Scaffold(\n        bottomBar \u003d {\n            NavigationBar {\n                val navBackStackEntry by navController.currentBackStackEntryAsState()\n                val currentDestination \u003d navBackStackEntry?.destination\n                \n                val items \u003d listOf(\n                    NavigationItem(\&quot;home\&quot;, \&quot;Inicio\&quot;, Icons.Filled.Home),\n                    NavigationItem(\&quot;finance\&quot;, \&quot;Finanzas\&quot;, Icons.Filled.AttachMoney),\n                    NavigationItem(\&quot;hr\&quot;, \&quot;RRHH\&quot;, Icons.Filled.Group),\n                    NavigationItem(\&quot;sales\&quot;, \&quot;Ventas\&quot;, Icons.Filled.ShoppingCart),\n                    NavigationItem(\&quot;settings\&quot;, \&quot;Ajustes\&quot;, Icons.Filled.Settings)\n                )\n                \n                items.forEach { item -\u003e\n                    NavigationBarItem(\n                        icon \u003d { Icon(item.icon, contentDescription \u003d item.title) },\n                        label \u003d { Text(item.title) },\n                        selected \u003d currentDestination?.hierarchy?.any { it.route \u003d\u003d item.route } \u003d\u003d true,\n                        onClick \u003d {\n                            navController.navigate(item.route) {\n                                popUpTo(navController.graph.findStartDestination().id) {\n                                    saveState \u003d true\n                                }\n                                launchSingleTop \u003d true\n                                restoreState \u003d true\n                            }\n                        }\n                    )\n                }\n            }\n        }\n    ) { padding -\u003e\n        NavHost(\n            navController \u003d navController,\n            startDestination \u003d \&quot;home\&quot;,\n            modifier \u003d modifier.padding(padding)\n        ) {\n            composable(\&quot;home\&quot;) { HomeScreen() }\n            composable(\&quot;finance\&quot;) { \n                val financeNavController \u003d rememberNavController()\n                FinanceNavHost(navController \u003d financeNavController)\n            }\n            composable(\&quot;hr\&quot;) { HRScreen() }\n            composable(\&quot;sales\&quot;) { SalesScreen() }\n            composable(\&quot;settings\&quot;) { SettingsScreen() }\n        }\n    }\n}\n\ndata class NavigationItem(\n    val route: String,\n    val title: String,\n    val icon: androidx.compose.ui.graphics.vector.ImageVector\n)&quot;},{&quot;role&quot;:&quot;tool&quot;,&quot;name&quot;:&quot;read_file&quot;,&quot;tool_call_id&quot;:&quot;call_XuzVsYwGm3ILLVkq8HbaVbzz&quot;,&quot;content&quot;:&quot;package com.example.orbisai.viewmodels\n\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport com.example.orbisai.data.models.FinancialTransaction\nimport com.example.orbisai.data.models.Invoice\nimport com.example.orbisai.domain.models.TransactionType\nimport com.example.orbisai.domain.usecases.ProcessTransactionUseCase\nimport com.example.orbisai.domain.usecases.GenerateFinancialReportUseCase\nimport com.example.orbisai.domain.usecases.ReconcileTransactionsUseCase\nimport com.example.orbisai.domain.usecases.GetInvoicesUseCase\nimport com.example.orbisai.domain.usecases.InsertInvoiceUseCase\nimport com.example.orbisai.domain.usecases.GenerateInvoicePdfUseCase\nimport com.example.orbisai.domain.usecases.ExportReconciliationDataUseCase\nimport dagger.hilt.android.lifecycle.HiltViewModel\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.combine\nimport kotlinx.coroutines.flow.first\nimport kotlinx.coroutines.launch\nimport java.util.Date\nimport javax.inject.Inject\n\ndata class FinanceUiState(\n    val transactions: List\u003cFinancialTransaction\u003e \u003d emptyList(),\n    val filteredTransactions: List\u003cFinancialTransaction\u003e \u003d emptyList(),\n    val invoices: List\u003cInvoice\u003e \u003d emptyList(),\n    val filteredInvoices: List\u003cInvoice\u003e \u003d emptyList(),\n    val selectedInvoice: Invoice? \u003d null,\n    val totalIncome: Double \u003d 0.0,\n    val totalExpenses: Double \u003d 0.0,\n    val balance: Double \u003d 0.0,\n    val financialReport: FinancialReport? \u003d null,\n    val reconciliationData: ReconciliationData? \u003d null,\n    val searchQuery: String \u003d \&quot;\&quot;,\n    val isSearchActive: Boolean \u003d false,\n    val invoiceSearchQuery: String \u003d \&quot;\&quot;,\n    val isInvoiceSearchActive: Boolean \u003d false,\n    val isLoading: Boolean \u003d false,\n    val isGeneratingPdf: Boolean \u003d false,\n    val pdfGenerated: Boolean \u003d false,\n    val isExportingReconciliation: Boolean \u003d false,\n    val showExportDialog: Boolean \u003d false,\n    val exportSuccess: Boolean \u003d false,\n    val error: String? \u003d null\n)\n\ndata class FinancialReport(\n    val period: String,\n    val totalIncome: Double,\n    val totalExpenses: Double,\n    val balance: Double,\n    val transactionCount: Int,\n    val topCategories: List\u003cCategorySummary\u003e,\n    val monthlyTrend: List\u003cMonthlyData\u003e\n)\n\ndata class CategorySummary(\n    val category: String,\n    val amount: Double,\n    val percentage: Double\n)\n\ndata class MonthlyData(\n    val month: String,\n    val income: Double,\n    val expenses: Double\n)\n\ndata class ReconciliationData(\n    val reconciledTransactions: List\u003cFinancialTransaction\u003e,\n    val unreconciledTransactions: List\u003cFinancialTransaction\u003e,\n    val reconciliationRate: Double\n)\n\n@HiltViewModel\nclass FinanceViewModel @Inject constructor(\n    private val processTransactionUseCase: ProcessTransactionUseCase,\n    private val generateFinancialReportUseCase: GenerateFinancialReportUseCase,\n    private val reconcileTransactionsUseCase: ReconcileTransactionsUseCase,\n    private val getInvoicesUseCase: GetInvoicesUseCase,\n    private val insertInvoiceUseCase: InsertInvoiceUseCase,\n    private val generateInvoicePdfUseCase: GenerateInvoicePdfUseCase,\n    private val exportReconciliationDataUseCase: ExportReconciliationDataUseCase\n) : ViewModel() {\n\n    private val _uiState \u003d MutableStateFlow(FinanceUiState(isLoading \u003d true))\n    val uiState: StateFlow\u003cFinanceUiState\u003e \u003d _uiState.asStateFlow()\n\n    var showAddDialog by mutableStateOf(false)\n        private set\n    \n    init {\n        loadTransactions()\n        loadInvoices()\n        calculateFinancialSummary()\n        generateReports()\n        reconcileTransactions()\n        // Agregar datos de prueba si no hay transacciones\n        addSampleDataIfEmpty()\n    }\n\n    private fun loadTransactions() {\n        viewModelScope.launch {\n            try {\n                _uiState.value \u003d _uiState.value.copy(isLoading \u003d true, error \u003d null)\n                \n                // Combinar flujos de ingresos y gastos\n                combine(\n                    processTransactionUseCase.getTransactionsByType(TransactionType.INCOME),\n                    processTransactionUseCase.getTransactionsByType(TransactionType.EXPENSE)\n                ) { incomeTransactions, expenseTransactions -\u003e\n                    val allTransactions \u003d (incomeTransactions + expenseTransactions)\n                        .sortedByDescending { it.date }\n                    \n                    _uiState.value \u003d _uiState.value.copy(\n                        transactions \u003d allTransactions,\n                        filteredTransactions \u003d allTransactions,\n                        isLoading \u003d false\n                    )\n                }.collect { }\n                \n            } catch (e: Exception) {\n                _uiState.value \u003d _uiState.value.copy(\n                    isLoading \u003d false,\n                    error \u003d e.message ?: \&quot;Error desconocido\&quot;\n                )\n            }\n        }\n    }\n\n    private fun calculateFinancialSummary() {\n        viewModelScope.launch {\n            try {\n                combine(\n                    processTransactionUseCase.getTotalByType(TransactionType.INCOME),\n                    processTransactionUseCase.getTotalByType(TransactionType.EXPENSE)\n                ) { totalIncome, totalExpenses -\u003e\n                    val income \u003d totalIncome ?: 0.0\n                    val expenses \u003d totalExpenses ?: 0.0\n                    val balance \u003d income - expenses\n                    \n                    _uiState.value \u003d _uiState.value.copy(\n                        totalIncome \u003d income,\n                        totalExpenses \u003d expenses,\n                        balance \u003d balance\n                    )\n                }.collect { }\n                \n            } catch (e: Exception) {\n                _uiState.value \u003d _uiState.value.copy(\n                    error \u003d e.message ?: \&quot;Error al calcular resumen\&quot;\n                )\n            }\n        }\n    }\n\n    fun addTransaction(\n        description: String,\n        amount: Double,\n        type: TransactionType,\n        category: String,\n        date: Date \u003d Date()\n    ) {\n        viewModelScope.launch {\n            try {\n                val result \u003d processTransactionUseCase(\n                    description \u003d description,\n                    amount \u003d amount,\n                    type \u003d type,\n                    category \u003d category,\n                    date \u003d date\n                )\n                \n                result.fold(\n                    onSuccess \u003d {\n                        showAddDialog \u003d false\n                        loadTransactions()\n                        calculateFinancialSummary()\n                    },\n                    onFailure \u003d { exception -\u003e\n                        _uiState.value \u003d _uiState.value.copy(\n                            error \u003d exception.message ?: \&quot;Error al agregar transacción\&quot;\n                        )\n                    }\n                )\n                \n            } catch (e: Exception) {\n                _uiState.value \u003d _uiState.value.copy(\n                    error \u003d e.message ?: \&quot;Error inesperado\&quot;\n                )\n            }\n        }\n    }\n\n    fun showAddTransactionDialog() {\n        showAddDialog \u003d true\n    }\n\n    fun hideAddTransactionDialog() {\n        showAddDialog \u003d false\n    }\n\n    fun clearError() {\n        _uiState.value \u003d _uiState.value.copy(error \u003d null)\n    }\n\n    fun refreshData() {\n        loadTransactions()\n        loadInvoices()\n        calculateFinancialSummary()\n        generateReports()\n        reconcileTransactions()\n    }\n\n    fun searchTransactions(query: String) {\n        _uiState.value \u003d _uiState.value.copy(\n            searchQuery \u003d query,\n            isSearchActive \u003d query.isNotBlank()\n        )\n        \n        if (query.isBlank()) {\n            // Si la búsqueda está vacía, mostrar todas las transacciones\n            _uiState.value \u003d _uiState.value.copy(\n                filteredTransactions \u003d _uiState.value.transactions\n            )\n        } else {\n            // Filtrar transacciones por la consulta\n            val filtered \u003d _uiState.value.transactions.filter { transaction -\u003e\n                transaction.description.contains(query, ignoreCase \u003d true) ||\n                transaction.category.contains(query, ignoreCase \u003d true) ||\n                transaction.amount.toString().contains(query, ignoreCase \u003d true) ||\n                transaction.reference?.contains(query, ignoreCase \u003d true) \u003d\u003d true ||\n                transaction.notes?.contains(query, ignoreCase \u003d true) \u003d\u003d true\n            }\n            \n            _uiState.value \u003d _uiState.value.copy(\n                filteredTransactions \u003d filtered\n            )\n        }\n    }\n\n    fun clearSearch() {\n        _uiState.value \u003d _uiState.value.copy(\n            searchQuery \u003d \&quot;\&quot;,\n            isSearchActive \u003d false,\n            filteredTransactions \u003d _uiState.value.transactions\n        )\n    }\n    \n    // Métodos para gestión de facturas\n    fun searchInvoices(query: String) {\n        _uiState.value \u003d _uiState.value.copy(\n            invoiceSearchQuery \u003d query,\n            isInvoiceSearchActive \u003d query.isNotBlank()\n        )\n\n        if (query.isBlank()) {\n            _uiState.value \u003d _uiState.value.copy(\n                filteredInvoices \u003d _uiState.value.invoices\n            )\n        } else {\n            viewModelScope.launch {\n                try {\n                    val filtered \u003d getInvoicesUseCase.searchInvoices(query).first()\n                    _uiState.value \u003d _uiState.value.copy(\n                        filteredInvoices \u003d filtered\n                    )\n                } catch (e: Exception) {\n                    _uiState.value \u003d _uiState.value.copy(\n                        error \u003d \&quot;Error al buscar facturas: ${e.message}\&quot;\n                    )\n                }\n            }\n        }\n    }\n\n    fun clearInvoiceSearch() {\n        _uiState.value \u003d _uiState.value.copy(\n            invoiceSearchQuery \u003d \&quot;\&quot;,\n            isInvoiceSearchActive \u003d false,\n            filteredInvoices \u003d _uiState.value.invoices\n        )\n    }\n    \n    fun addInvoice(\n        invoiceNumber: String,\n        supplier: String,\n        amount: Double,\n        taxAmount: Double,\n        issueDate: Date,\n        dueDate: Date,\n        description: String? \u003d null\n    ) {\n        viewModelScope.launch {\n            try {\n                val invoice \u003d Invoice(\n                    invoiceNumber \u003d invoiceNumber,\n                    supplier \u003d supplier,\n                    amount \u003d amount,\n                    taxAmount \u003d taxAmount,\n                    totalAmount \u003d amount + taxAmount,\n                    issueDate \u003d issueDate,\n                    dueDate \u003d dueDate,\n                    description \u003d description\n                )\n                \n                val result \u003d insertInvoiceUseCase.insertInvoice(invoice)\n                if (result.isSuccess) {\n                    loadInvoices()\n                    showAddDialog \u003d false\n                } else {\n                    _uiState.value \u003d _uiState.value.copy(\n                        error \u003d \&quot;Error al agregar factura: ${result.exceptionOrNull()?.message}\&quot;\n                    )\n                }\n            } catch (e: Exception) {\n                _uiState.value \u003d _uiState.value.copy(\n                    error \u003d \&quot;Error al agregar factura: ${e.message}\&quot;\n                )\n            }\n        }\n    }\n    \n    fun updateInvoiceStatus(invoiceId: Long, status: com.example.orbisai.domain.models.InvoiceStatus) {\n        viewModelScope.launch {\n            try {\n                val result \u003d insertInvoiceUseCase.updateInvoiceStatus(invoiceId, status)\n                if (result.isSuccess) {\n                    loadInvoices()\n                } else {\n                    _uiState.value \u003d _uiState.value.copy(\n                        error \u003d \&quot;Error al actualizar estado: ${result.exceptionOrNull()?.message}\&quot;\n                    )\n                }\n            } catch (e: Exception) {\n                _uiState.value \u003d _uiState.value.copy(\n                    error \u003d \&quot;Error al actualizar estado: ${e.message}\&quot;\n                )\n            }\n        }\n    }\n    \n    fun getInvoiceById(invoiceId: Long) {\n        viewModelScope.launch {\n            try {\n                val invoice \u003d getInvoicesUseCase.getInvoiceById(invoiceId).first()\n                _uiState.value \u003d _uiState.value.copy(\n                    selectedInvoice \u003d invoice\n                )\n            } catch (e: Exception) {\n                _uiState.value \u003d _uiState.value.copy(\n                    error \u003d \&quot;Error al obtener factura: ${e.message}\&quot;\n                )\n            }\n        }\n    }\n    \n    fun generateInvoicePdf(context: android.content.Context) {\n        val invoice \u003d _uiState.value.selectedInvoice\n        if (invoice \u003d\u003d null) {\n            _uiState.value \u003d _uiState.value.copy(\n                error \u003d \&quot;No hay factura seleccionada para generar PDF\&quot;\n            )\n            return\n        }\n        \n        viewModelScope.launch {\n            try {\n                _uiState.value \u003d _uiState.value.copy(\n                    isGeneratingPdf \u003d true,\n                    error \u003d null\n                )\n                \n                val result \u003d generateInvoicePdfUseCase.generateInvoicePdf(context, invoice)\n                \n                result.fold(\n                    onSuccess \u003d { file -\u003e\n                        _uiState.value \u003d _uiState.value.copy(\n                            isGeneratingPdf \u003d false,\n                            pdfGenerated \u003d true\n                        )\n                    },\n                    onFailure \u003d { exception -\u003e\n                        _uiState.value \u003d _uiState.value.copy(\n                            isGeneratingPdf \u003d false,\n                            error \u003d \&quot;Error al generar PDF: ${exception.message}\&quot;\n                        )\n                    }\n                )\n            } catch (e: Exception) {\n                _uiState.value \u003d _uiState.value.copy(\n                    isGeneratingPdf \u003d false,\n                    error \u003d \&quot;Error al generar PDF: ${e.message}\&quot;\n                )\n            }\n        }\n    }\n    \n    fun clearPdfState() {\n        _uiState.value \u003d _uiState.value.copy(\n            isGeneratingPdf \u003d false,\n            pdfGenerated \u003d false,\n            error \u003d null\n        )\n    }\n\n    private fun loadInvoices() {\n        viewModelScope.launch {\n            try {\n                val allInvoices \u003d getInvoicesUseCase.getAllInvoices().first()\n                _uiState.value \u003d _uiState.value.copy(\n                    invoices \u003d allInvoices,\n                    filteredInvoices \u003d allInvoices,\n                    isLoading \u003d false\n                )\n            } catch (e: Exception) {\n                _uiState.value \u003d _uiState.value.copy(\n                    error \u003d \&quot;Error al cargar facturas: ${e.message}\&quot;,\n                    isLoading \u003d false\n                )\n            }\n        }\n    }\n\n    fun generateReports() {\n        viewModelScope.launch {\n            try {\n                val report \u003d generateFinancialReportUseCase()\n                _uiState.value \u003d _uiState.value.copy(financialReport \u003d report)\n            } catch (e: Exception) {\n                _uiState.value \u003d _uiState.value.copy(\n                    error \u003d \&quot;Error al generar reportes: ${e.message}\&quot;\n                )\n            }\n        }\n    }\n\n    fun reconcileTransactions() {\n        viewModelScope.launch {\n            try {\n                val reconciliationData \u003d reconcileTransactionsUseCase()\n                _uiState.value \u003d _uiState.value.copy(reconciliationData \u003d reconciliationData)\n            } catch (e: Exception) {\n                _uiState.value \u003d _uiState.value.copy(\n                    error \u003d \&quot;Error en conciliación: ${e.message}\&quot;\n                )\n            }\n        }\n    }\n    \n    fun reconcileSingleTransaction(transactionId: Long) {\n        viewModelScope.launch {\n            try {\n                // Marcar transacción como conciliada\n                processTransactionUseCase.markTransactionAsReconciled(transactionId)\n                \n                // Recargar datos de conciliación\n                reconcileTransactions()\n                \n                // Recargar transacciones\n                loadTransactions()\n            } catch (e: Exception) {\n                _uiState.value \u003d _uiState.value.copy(\n                    error \u003d \&quot;Error al conciliar transacción: ${e.message}\&quot;\n                )\n            }\n        }\n    }\n    \n    fun updateTransactionDetails(transactionId: Long, reference: String, notes: String) {\n        viewModelScope.launch {\n            try {\n                // Actualizar detalles de la transacción\n                processTransactionUseCase.updateTransactionDetails(transactionId, reference, notes)\n                \n                // Recargar datos de conciliación\n                reconcileTransactions()\n                \n                // Recargar transacciones\n                loadTransactions()\n            } catch (e: Exception) {\n                _uiState.value \u003d _uiState.value.copy(\n                    error \u003d \&quot;Error al actualizar transacción: ${e.message}\&quot;\n                )\n            }\n        }\n    }\n    \n    fun showExportDialog() {\n        _uiState.value \u003d _uiState.value.copy(showExportDialog \u003d true)\n    }\n\n    fun hideExportDialog() {\n        _uiState.value \u003d _uiState.value.copy(showExportDialog \u003d false)\n    }\n\n    fun exportReconciliationData(\n        context: android.content.Context,\n        fileName: String? \u003d null,\n        format: com.example.orbisai.domain.usecases.ExportFormat \u003d com.example.orbisai.domain.usecases.ExportFormat.PDF\n    ) {\n        viewModelScope.launch {\n            try {\n                _uiState.value \u003d _uiState.value.copy(\n                    isExportingReconciliation \u003d true,\n                    error \u003d null\n                )\n                \n                val reconciliationData \u003d _uiState.value.reconciliationData\n                if (reconciliationData !\u003d null) {\n                    val result \u003d exportReconciliationDataUseCase.exportReconciliationPdf(context, reconciliationData, fileName, format)\n                    \n                    result.fold(\n                        onSuccess \u003d { file -\u003e\n                            _uiState.value \u003d _uiState.value.copy(\n                                isExportingReconciliation \u003d false,\n                                showExportDialog \u003d false,\n                                exportSuccess \u003d true,\n                                error \u003d null\n                            )\n                            // Limpiar el éxito después de 3 segundos\n                            viewModelScope.launch {\n                                kotlinx.coroutines.delay(3000)\n                                _uiState.value \u003d _uiState.value.copy(exportSuccess \u003d false)\n                            }\n                        },\n                        onFailure \u003d { exception -\u003e\n                            _uiState.value \u003d _uiState.value.copy(\n                                isExportingReconciliation \u003d false,\n                                error \u003d \&quot;Error al exportar PDF: ${exception.message}\&quot;\n                            )\n                        }\n                    )\n                } else {\n                    _uiState.value \u003d _uiState.value.copy(\n                        isExportingReconciliation \u003d false,\n                        error \u003d \&quot;No hay datos de conciliación para exportar\&quot;\n                    )\n                }\n            } catch (e: Exception) {\n                _uiState.value \u003d _uiState.value.copy(\n                    isExportingReconciliation \u003d false,\n                    error \u003d \&quot;Error al exportar datos: ${e.message}\&quot;\n                )\n            }\n        }\n    }\n\n    fun addTestTransaction() {\n        viewModelScope.launch {\n            try {\n                val testTransaction \u003d FinancialTransaction(\n                    description \u003d \&quot;Transacción de prueba ${System.currentTimeMillis()}\&quot;,\n                    amount \u003d (100..1000).random().toDouble(),\n                    type \u003d if (Math.random() \u003e 0.5) TransactionType.INCOME else TransactionType.EXPENSE,\n                    category \u003d listOf(\&quot;Prueba\&quot;, \&quot;Test\&quot;, \&quot;Demo\&quot;).random(),\n                    date \u003d Date()\n                )\n                \n                processTransactionUseCase(\n                    description \u003d testTransaction.description,\n                    amount \u003d testTransaction.amount,\n                    type \u003d testTransaction.type,\n                    category \u003d testTransaction.category,\n                    date \u003d testTransaction.date\n                )\n                \n                loadTransactions()\n                calculateFinancialSummary()\n                \n            } catch (e: Exception) {\n                _uiState.value \u003d _uiState.value.copy(\n                    error \u003d \&quot;Error al agregar transacción de prueba: ${e.message}\&quot;\n                )\n            }\n        }\n    }\n\n    fun clearAllData() {\n        viewModelScope.launch {\n            try {\n                // Eliminar todas las transacciones de la base de datos\n                val result \u003d processTransactionUseCase.deleteAllTransactions()\n                \n                result.fold(\n                    onSuccess \u003d { deletedCount -\u003e\n                        // Limpiar estado local\n                        _uiState.value \u003d _uiState.value.copy(\n                            transactions \u003d emptyList(),\n                            totalIncome \u003d 0.0,\n                            totalExpenses \u003d 0.0,\n                            balance \u003d 0.0\n                        )\n                        \n                        // Recargar datos de prueba\n                        addSampleDataIfEmpty()\n                    },\n                    onFailure \u003d { exception -\u003e\n                        _uiState.value \u003d _uiState.value.copy(\n                            error \u003d \&quot;Error al limpiar datos: ${exception.message}\&quot;\n                        )\n                    }\n                )\n                \n            } catch (e: Exception) {\n                _uiState.value \u003d _uiState.value.copy(\n                    error \u003d \&quot;Error al limpiar datos: ${e.message}\&quot;\n                )\n            }\n        }\n    }\n\n    private fun addSampleDataIfEmpty() {\n        viewModelScope.launch {\n            try {\n                val currentTransactions \u003d _uiState.value.transactions\n                if (currentTransactions.isEmpty()) {\n                    // Datos de prueba para demostrar funcionalidad\n                    val sampleTransactions \u003d listOf(\n                        FinancialTransaction(\n                            description \u003d \&quot;Venta de proyecto web\&quot;,\n                            amount \u003d 5000.0,\n                            type \u003d TransactionType.INCOME,\n                            category \u003d \&quot;Ventas\&quot;,\n                            date \u003d Date()\n                        ),\n                        FinancialTransaction(\n                            description \u003d \&quot;Pago de nómina\&quot;,\n                            amount \u003d 3200.0,\n                            type \u003d TransactionType.EXPENSE,\n                            category \u003d \&quot;Personal\&quot;,\n                            date \u003d Date()\n                        ),\n                        FinancialTransaction(\n                            description \u003d \&quot;Servicios de hosting\&quot;,\n                            amount \u003d 150.0,\n                            type \u003d TransactionType.EXPENSE,\n                            category \u003d \&quot;Tecnología\&quot;,\n                            date \u003d Date()\n                        ),\n                        FinancialTransaction(\n                            description \u003d \&quot;Consultoría externa\&quot;,\n                            amount \u003d 2500.0,\n                            type \u003d TransactionType.INCOME,\n                            category \u003d \&quot;Servicios\&quot;,\n                            date \u003d Date()\n                        ),\n                        FinancialTransaction(\n                            description \u003d \&quot;Compra de equipos\&quot;,\n                            amount \u003d 800.0,\n                            type \u003d TransactionType.EXPENSE,\n                            category \u003d \&quot;Equipos\&quot;,\n                            date \u003d Date()\n                        )\n                    )\n                    \n                    // Agregar transacciones de prueba\n                    sampleTransactions.forEach { transaction -\u003e\n                        processTransactionUseCase(\n                            description \u003d transaction.description,\n                            amount \u003d transaction.amount,\n                            type \u003d transaction.type,\n                            category \u003d transaction.category,\n                            date \u003d transaction.date\n                        )\n                    }\n                    \n                    // Recargar datos\n                    loadTransactions()\n                    calculateFinancialSummary()\n                }\n                \n                // Agregar facturas de ejemplo si no hay\n                if (uiState.value.invoices.isEmpty()) {\n                    addSampleInvoices()\n                }\n            } catch (e: Exception) {\n                _uiState.value \u003d _uiState.value.copy(\n                    error \u003d \&quot;Error al cargar datos de prueba: ${e.message}\&quot;\n                )\n            }\n        }\n    }\n    \n    private fun addSampleInvoices() {\n        viewModelScope.launch {\n            try {\n                val sampleInvoices \u003d listOf(\n                    Invoice(\n                        invoiceNumber \u003d \&quot;INV-001\&quot;,\n                        supplier \u003d \&quot;Proveedor A\&quot;,\n                        amount \u003d 500000.0,\n                        taxAmount \u003d 95000.0,\n                        totalAmount \u003d 595000.0,\n                        issueDate \u003d Date(),\n                        dueDate \u003d Date(System.currentTimeMillis() + 30 * 24 * 60 * 60 * 1000L),\n                        status \u003d com.example.orbisai.domain.models.InvoiceStatus.PENDING\n                    ),\n                    Invoice(\n                        invoiceNumber \u003d \&quot;INV-002\&quot;,\n                        supplier \u003d \&quot;Proveedor B\&quot;,\n                        amount \u003d 750000.0,\n                        taxAmount \u003d 142500.0,\n                        totalAmount \u003d 892500.0,\n                        issueDate \u003d Date(),\n                        dueDate \u003d Date(System.currentTimeMillis() + 15 * 24 * 60 * 60 * 1000L),\n                        status \u003d com.example.orbisai.domain.models.InvoiceStatus.APPROVED\n                    ),\n                    Invoice(\n                        invoiceNumber \u003d \&quot;INV-003\&quot;,\n                        supplier \u003d \&quot;Proveedor C\&quot;,\n                        amount \u003d 300000.0,\n                        taxAmount \u003d 57000.0,\n                        totalAmount \u003d 357000.0,\n                        issueDate \u003d Date(),\n                        dueDate \u003d Date(System.currentTimeMillis() - 5 * 24 * 60 * 60 * 1000L),\n                        status \u003d com.example.orbisai.domain.models.InvoiceStatus.PAID\n                    )\n                )\n                \n                sampleInvoices.forEach { invoice -\u003e\n                    processTransactionUseCase.insertInvoice(invoice)\n                }\n                \n                // Recargar facturas\n                loadInvoices()\n            } catch (e: Exception) {\n                _uiState.value \u003d _uiState.value.copy(\n                    error \u003d \&quot;Error al agregar facturas de prueba: ${e.message}\&quot;\n                )\n            }\n        }\n    }\n}\n&quot;},{&quot;role&quot;:&quot;tool&quot;,&quot;name&quot;:&quot;read_file&quot;,&quot;tool_call_id&quot;:&quot;call_OrOqBSjFZ4wcJj8dQ1mbL9SV&quot;,&quot;content&quot;:&quot;package com.example.orbisai.components\n\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Info\nimport androidx.compose.material.icons.filled.PlayArrow\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.dp\nimport com.example.orbisai.domain.models.TransactionType\n\n@Composable\nfun TestInfoCard(\n    onAddTestTransaction: () -\u003e Unit,\n    onClearData: () -\u003e Unit,\n    modifier: Modifier \u003d Modifier\n) {\n    var expanded by remember { mutableStateOf(false) }\n    \n    Card(\n        modifier \u003d modifier.fillMaxWidth(),\n        shape \u003d RoundedCornerShape(16.dp),\n        colors \u003d CardDefaults.cardColors(\n            containerColor \u003d MaterialTheme.colorScheme.secondaryContainer\n        )\n    ) {\n        Column(\n            modifier \u003d Modifier.padding(16.dp)\n        ) {\n            Row(\n                modifier \u003d Modifier.fillMaxWidth(),\n                horizontalArrangement \u003d Arrangement.SpaceBetween,\n                verticalAlignment \u003d Alignment.CenterVertically\n            ) {\n                Row(\n                    verticalAlignment \u003d Alignment.CenterVertically\n                ) {\n                    Icon(\n                        imageVector \u003d Icons.Default.Info,\n                        contentDescription \u003d \&quot;Información de prueba\&quot;,\n                        tint \u003d MaterialTheme.colorScheme.onSecondaryContainer\n                    )\n                    Spacer(modifier \u003d Modifier.width(8.dp))\n                    Text(\n                        text \u003d \&quot;Información de Prueba\&quot;,\n                        style \u003d MaterialTheme.typography.titleMedium.copy(\n                            fontWeight \u003d FontWeight.Bold\n                        ),\n                        color \u003d MaterialTheme.colorScheme.onSecondaryContainer\n                    )\n                }\n                \n                IconButton(onClick \u003d { expanded \u003d !expanded }) {\n                    Icon(\n                        imageVector \u003d if (expanded) Icons.Default.PlayArrow else Icons.Default.PlayArrow,\n                        contentDescription \u003d \&quot;Expandir\&quot;,\n                        tint \u003d MaterialTheme.colorScheme.onSecondaryContainer\n                    )\n                }\n            }\n            \n            if (expanded) {\n                Spacer(modifier \u003d Modifier.height(12.dp))\n                \n                Text(\n                    text \u003d \&quot;Este módulo incluye datos de prueba para demostrar la funcionalidad:\&quot;,\n                    style \u003d MaterialTheme.typography.bodyMedium,\n                    color \u003d MaterialTheme.colorScheme.onSecondaryContainer\n                )\n                \n                Spacer(modifier \u003d Modifier.height(8.dp))\n                \n                Text(\n                    text \u003d \&quot;• 5 transacciones de ejemplo\\n\&quot; +\n                          \&quot;• Ingresos y gastos variados\\n\&quot; +\n                          \&quot;• Categorías diferentes\\n\&quot; +\n                          \&quot;• Cálculos automáticos\&quot;,\n                    style \u003d MaterialTheme.typography.bodySmall,\n                    color \u003d MaterialTheme.colorScheme.onSecondaryContainer\n                )\n                \n                Spacer(modifier \u003d Modifier.height(16.dp))\n                \n                Row(\n                    modifier \u003d Modifier.fillMaxWidth(),\n                    horizontalArrangement \u003d Arrangement.spacedBy(8.dp)\n                ) {\n                    Button(\n                        onClick \u003d onAddTestTransaction,\n                        modifier \u003d Modifier.weight(1f),\n                        colors \u003d ButtonDefaults.buttonColors(\n                            containerColor \u003d MaterialTheme.colorScheme.primary\n                        )\n                    ) {\n                        Icon(Icons.Default.PlayArrow, contentDescription \u003d null)\n                        Spacer(modifier \u003d Modifier.width(4.dp))\n                        Text(\&quot;Agregar Prueba\&quot;)\n                    }\n                    \n                    OutlinedButton(\n                        onClick \u003d onClearData,\n                        modifier \u003d Modifier.weight(1f)\n                    ) {\n                        Text(\&quot;Limpiar\&quot;)\n                    }\n                }\n            }\n        }\n    }\n}\n&quot;},{&quot;role&quot;:&quot;tool&quot;,&quot;name&quot;:&quot;read_file&quot;,&quot;tool_call_id&quot;:&quot;call_lZtmB5GuPsH3rD3cMWWyPG3d&quot;,&quot;content&quot;:&quot;package com.example.orbisai.data.models\n\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport androidx.room.TypeConverters\nimport com.example.orbisai.data.local.converters.DateConverter\nimport com.example.orbisai.domain.models.TransactionType\nimport com.example.orbisai.domain.models.TransactionStatus\nimport java.util.Date\n\n@Entity(tableName \u003d \&quot;financial_transactions\&quot;)\n@TypeConverters(DateConverter::class)\ndata class FinancialTransaction(\n    @PrimaryKey(autoGenerate \u003d true)\n    val id: Long \u003d 0,\n    val description: String,\n    val amount: Double,\n    val type: TransactionType,\n    val category: String,\n    val date: Date,\n    val status: TransactionStatus \u003d TransactionStatus.PENDING,\n    val reference: String? \u003d null,\n    val notes: String? \u003d null,\n    val createdAt: Date \u003d Date(),\n    val updatedAt: Date \u003d Date()\n)\n&quot;},{&quot;role&quot;:&quot;tool&quot;,&quot;name&quot;:&quot;read_file&quot;,&quot;tool_call_id&quot;:&quot;call_Xekq7xQjCkHSkk64ql5kylnm&quot;,&quot;content&quot;:&quot;package com.example.orbisai.domain.models\n\nenum class TransactionType {\n    INCOME,     // Ingreso\n    EXPENSE,    // Gasto\n    TRANSFER    // Transferencia\n}\n&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;He realizado un análisis básico de la estructura y componentes clave de tu proyecto. Aquí tienes un resumen del análisis para verificar la visualización de Compose Preview y el funcionamiento general del módulo de finanzas (Finance):\n\n---\n\n### 1. Estructura Relevante del Proyecto\n\n- **MainActivity.kt:** Usa el patrón estándar Compose y Hilt para inyectar dependencias. Gestiona la navegación por pantallas como Home, Finanzas, Recursos Humanos, Ventas y Ajustes a través de un NavHost, con un Scaffold para barra de navegación inferior.\n  \n- **screens/FinanceScreen.kt:** Esta es la pantalla de Finanzas. Utiliza `hiltViewModel()` (inyecta el ViewModel con Hilt) y espera un `FinanceViewModel`. Tiene un Preview declarado, pero al recibir el viewModel usando Hilt, la preview fallará salvo que se pase un ViewModel \&quot;falso\&quot; o se sobrecargue el composable.\n  \n- **viewmodels/FinanceViewModel.kt:** El ViewModel está correctamente estructurado, inyecta varios casos de uso, maneja el estado usando `StateFlow` y expone un `FinanceUiState` rico para la UI, con transacciones, error, indicadores y lógica de prueba, búsqueda y resumen financiero.\n\n- **data/models/FinancialTransaction.kt:** Define la entidad principal de transacción con todos los campos requeridos, ideal para pruebas de UI fake/mock.\n\n- **components/TestInfoCard.kt:** Composable auxiliar para UI de prueba, permite agregar transacciones y limpiar datos rápidamente desde la UI.\n\n- **domain/models/TransactionType.kt:** Enum que define el tipo de transacción (INGRESO, GASTO, TRANSFERENCIA).\n\n---\n\n### 2. ¿Está todo listo para Compose Preview?\n\n**NO completamente.**  \nAunque tienes la anotación `@Preview` y tu UI es modular, hay un problema:\n- El `FinanceScreen` espera que exista un ViewModel real inyectado por Hilt. compose preview NO soporta ni Hilt ni ViewModels que requieran di, contexto, etc.  \n- Para poder visualizar la UI en el Preview de Android Studio, debes:\n  - Crear un `FakeFinanceViewModel` o exponer una sobrecarga de `FinanceScreen` que reciba los datos como parámetros en vez del viewModel.\n  - Pasar un State \&quot;dummy\&quot; para satisfacer la firma de la UI en modo preview.\n\n---\n\n### 3. Recomendaciones para Previews en todo el proyecto\n\n- **Screen Previews:** HomeScreen, HRScreen, SalesScreen, SettingsScreen, FinanceScreen requieren una fuente de datos dummy/specífica para funcionar en preview, ya que usan viewmodels, estados, listas, etc.\n- **Component Previews:** Componentes pequeños (ej: TestInfoCard) pueden tener previews agregando datos estáticos directamente en el archivo correspondiente, sin dependencias externas.\n\n---\n\n### 4. Siguiente paso sugerido\n\nTe puedo crear un ViewModel \&quot;falso\&quot; de prueba (o un UI State dummy) y modificar la función `FinanceScreenPreview` para que la preview funcione correctamente en Android Studio.\n\n¿Quieres que realice estos cambios para tener Compose Preview funcional y sin errores DI en tu pantalla Finance? ¿O necesitas recomendaciones/globales para los previews de todas tus pantallas principales?&quot;}]},{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\u003cuser_query\u003e\naplicalo correctamente sin errores\n\u003c/user_query\u003e&quot;}]},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;&quot;}],&quot;tool_calls&quot;:[{&quot;id&quot;:&quot;call_Rkbzm2GkmzuYacp77gr9LM5l&quot;,&quot;type&quot;:&quot;function&quot;,&quot;function&quot;:{&quot;name&quot;:&quot;read_file&quot;,&quot;arguments&quot;:&quot;{\&quot;target_file\&quot;:\&quot;app/src/main/java/com/example/orbisai/screens/FinanceScreen.kt\&quot;}&quot;}}]},{&quot;role&quot;:&quot;tool&quot;,&quot;name&quot;:&quot;read_file&quot;,&quot;tool_call_id&quot;:&quot;call_Rkbzm2GkmzuYacp77gr9LM5l&quot;,&quot;content&quot;:&quot;package com.example.orbisai.screens\n\nimport androidx.compose.animation.AnimatedVisibility\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.fadeOut\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.grid.GridCells\nimport androidx.compose.foundation.lazy.grid.LazyVerticalGrid\nimport androidx.compose.foundation.lazy.grid.items\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.automirrored.filled.ReceiptLong\nimport androidx.compose.material.icons.automirrored.filled.TrendingDown\nimport androidx.compose.material.icons.automirrored.filled.TrendingUp\nimport androidx.compose.material.icons.filled.Add\nimport androidx.compose.material.icons.filled.AttachMoney\nimport androidx.compose.material.icons.filled.BarChart\nimport androidx.compose.material.icons.filled.Clear\nimport androidx.compose.material.icons.filled.Search\nimport androidx.compose.material.icons.filled.SearchOff\nimport androidx.compose.material.icons.filled.SwapHoriz\nimport androidx.compose.material.icons.filled.Sync\nimport androidx.compose.material.icons.filled.TrendingDown\nimport androidx.compose.material.icons.filled.TrendingUp\nimport androidx.compose.material3.AlertDialog\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.CardDefaults\nimport androidx.compose.material3.CircularProgressIndicator\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.FloatingActionButton\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.RadioButton\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextButton\nimport androidx.compose.material3.TextField\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.material3.TopAppBarDefaults\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport com.example.orbisai.components.TestInfoCard\nimport com.example.orbisai.data.models.FinancialTransaction\nimport com.example.orbisai.domain.models.TransactionType\nimport com.example.orbisai.ui.components.DashboardCard\nimport com.example.orbisai.viewmodels.FinanceUiState\nimport com.example.orbisai.viewmodels.FinanceViewModel\n\n// Data class para KPIs dinámicos\nprivate data class KpiItem(\n    val title: String,\n    val value: String,\n    val icon: androidx.compose.ui.graphics.vector.ImageVector\n)\n\n// Enum para monedas soportadas\nprivate enum class Currency(val symbol: String, val code: String) {\n    COP(\&quot;$\&quot;, \&quot;COP\&quot;),    // Peso Colombiano\n    USD(\&quot;$\&quot;, \&quot;USD\&quot;),    // Dólar Estadounidense\n    EUR(\&quot;€\&quot;, \&quot;EUR\&quot;),    // Euro\n    GBP(\&quot;£\&quot;, \&quot;GBP\&quot;)     // Libra Esterlina\n}\n\n// Función para formatear moneda\nprivate fun formatCurrency(amount: Double, currency: Currency \u003d Currency.COP): String {\n    return \&quot;${currency.symbol}${amount.toInt()}\&quot;\n}\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun FinanceScreen(\n    modifier: Modifier \u003d Modifier, \n    viewModel: FinanceViewModel \u003d hiltViewModel(),\n    onNavigateToInvoices: () -\u003e Unit \u003d {},\n    onNavigateToReconciliation: () -\u003e Unit \u003d {},\n    onNavigateToReports: () -\u003e Unit \u003d {}\n) {\n    val uiState by viewModel.uiState.collectAsStateWithLifecycle()\n    var showAddDialog by remember { mutableStateOf(false) }\n    var showSearchDialog by remember { mutableStateOf(false) }\n    \n    // Usar transacciones reales del ViewModel\n    \n    Scaffold(\n        topBar \u003d {\n            TopAppBar(\n                title \u003d {\n                    Text(\n                        text \u003d \&quot;Finanzas\&quot;,\n                        style \u003d MaterialTheme.typography.titleLarge.copy(\n                            fontWeight \u003d FontWeight.Bold\n                        )\n                    )\n                },\n                actions \u003d {\n                    // Mostrar indicador de búsqueda activa\n                    if (uiState.isSearchActive) {\n                        IconButton(onClick \u003d { viewModel.clearSearch() }) {\n                            Icon(\n                                imageVector \u003d Icons.Default.Clear,\n                                contentDescription \u003d \&quot;Limpiar búsqueda\&quot;,\n                                tint \u003d MaterialTheme.colorScheme.onPrimaryContainer\n                            )\n                        }\n                    }\n                    \n                    IconButton(onClick \u003d { showSearchDialog \u003d true }) {\n                        Icon(\n                            imageVector \u003d if (uiState.isSearchActive) Icons.Default.Search else Icons.Default.Search,\n                            contentDescription \u003d \&quot;Buscar transacciones\&quot;,\n                            tint \u003d if (uiState.isSearchActive) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onPrimaryContainer\n                        )\n                    }\n                },\n                colors \u003d TopAppBarDefaults.topAppBarColors(\n                    containerColor \u003d MaterialTheme.colorScheme.primaryContainer,\n                    titleContentColor \u003d MaterialTheme.colorScheme.onPrimaryContainer,\n                    actionIconContentColor \u003d MaterialTheme.colorScheme.onPrimaryContainer\n                )\n            )\n        },\n        floatingActionButton \u003d {\n            FloatingActionButton(\n                onClick \u003d { showAddDialog \u003d true },\n                containerColor \u003d MaterialTheme.colorScheme.primary\n            ) {\n                Icon(\n                    imageVector \u003d Icons.Default.Add,\n                    contentDescription \u003d \&quot;Nuevo registro\&quot;,\n                    tint \u003d MaterialTheme.colorScheme.onPrimary\n                )\n            }\n        }\n    ) { padding -\u003e\n        when {\n            uiState.isLoading -\u003e {\n                Column(\n                    modifier \u003d Modifier\n                        .fillMaxSize()\n                        .padding(padding),\n                    horizontalAlignment \u003d Alignment.CenterHorizontally,\n                    verticalArrangement \u003d Arrangement.Center\n                ) {\n                    CircularProgressIndicator()\n                    Spacer(modifier \u003d Modifier.height(16.dp))\n                    Text(\&quot;Cargando datos financieros...\&quot;)\n                }\n            }\n            uiState.error !\u003d null -\u003e {\n                Column(\n                    modifier \u003d Modifier\n                        .fillMaxSize()\n                        .padding(padding),\n                    horizontalAlignment \u003d Alignment.CenterHorizontally,\n                    verticalArrangement \u003d Arrangement.Center\n                ) {\n                    Text(\n                        text \u003d uiState.error!!,\n                        color \u003d MaterialTheme.colorScheme.error,\n                        style \u003d MaterialTheme.typography.bodyMedium\n                    )\n                    Spacer(modifier \u003d Modifier.height(16.dp))\n                    Button(onClick \u003d { viewModel.refreshData() }) {\n                        Text(\&quot;Reintentar\&quot;)\n                    }\n                }\n            }\n            else -\u003e {\n                LazyColumn(\n                    modifier \u003d modifier\n                        .fillMaxSize()\n                        .padding(padding),\n                    contentPadding \u003d PaddingValues(16.dp),\n                    verticalArrangement \u003d Arrangement.spacedBy(16.dp)\n                ) {\n            // Información de prueba\n            item {\n                TestInfoCard(\n                    onAddTestTransaction \u003d { viewModel.addTestTransaction() },\n                    onClearData \u003d { viewModel.clearAllData() }\n                )\n            }\n            \n            // Resumen general\n            item {\n                AnimatedVisibility(\n                    visible \u003d true,\n                    enter \u003d fadeIn(),\n                    exit \u003d fadeOut()\n                ) {\n                    Card(\n                        modifier \u003d Modifier.fillMaxWidth(),\n                        shape \u003d RoundedCornerShape(24.dp),\n                        colors \u003d CardDefaults.cardColors(\n                            containerColor \u003d MaterialTheme.colorScheme.primaryContainer\n                        )\n                    ) {\n                        Column(\n                            modifier \u003d Modifier.padding(24.dp)\n                        ) {\n                            Text(\n                                text \u003d \&quot;Resumen Financiero\&quot;,\n                                style \u003d MaterialTheme.typography.titleLarge.copy(\n                                    fontWeight \u003d FontWeight.Bold\n                                ),\n                                color \u003d MaterialTheme.colorScheme.onPrimaryContainer\n                            )\n                            \n                            Spacer(modifier \u003d Modifier.height(16.dp))\n                            \n                            Row(\n                                modifier \u003d Modifier.fillMaxWidth(),\n                                horizontalArrangement \u003d Arrangement.SpaceBetween\n                            ) {\n                                SummaryItem(\n                                    label \u003d \&quot;Ingresos\&quot;,\n                                    value \u003d formatCurrency(uiState.totalIncome),\n                                    color \u003d MaterialTheme.colorScheme.primary\n                                )\n                                SummaryItem(\n                                    label \u003d \&quot;Gastos\&quot;,\n                                    value \u003d formatCurrency(uiState.totalExpenses),\n                                    color \u003d MaterialTheme.colorScheme.error\n                                )\n                                SummaryItem(\n                                    label \u003d \&quot;Balance\&quot;,\n                                    value \u003d formatCurrency(uiState.balance),\n                                    color \u003d if (uiState.balance \u003e\u003d 0) \n                                        MaterialTheme.colorScheme.tertiary \n                                    else \n                                        MaterialTheme.colorScheme.error\n                                )\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // KPIs Grid\n            item {\n                Text(\n                    text \u003d \&quot;Métricas Financieras\&quot;,\n                    style \u003d MaterialTheme.typography.titleMedium.copy(\n                        fontWeight \u003d FontWeight.SemiBold\n                    ),\n                    modifier \u003d Modifier.padding(bottom \u003d 8.dp)\n                )\n            }\n            \n            item {\n                LazyVerticalGrid(\n                    columns \u003d GridCells.Fixed(2),\n                    modifier \u003d Modifier.height(200.dp),\n                    contentPadding \u003d PaddingValues(8.dp),\n                    horizontalArrangement \u003d Arrangement.spacedBy(8.dp),\n                    verticalArrangement \u003d Arrangement.spacedBy(8.dp)\n                ) {\n                    items(getKpiItems(uiState)) { kpi -\u003e\n                        DashboardCard(\n                            item \u003d kpi.title,\n                            icon \u003d kpi.icon,\n                            value \u003d kpi.value\n                        )\n                    }\n                }\n            }\n            \n            // Navegación a sub-pantallas\n            item {\n                Text(\n                    text \u003d \&quot;Acciones Rápidas\&quot;,\n                    style \u003d MaterialTheme.typography.titleMedium.copy(\n                        fontWeight \u003d FontWeight.SemiBold\n                    ),\n                    modifier \u003d Modifier.padding(bottom \u003d 8.dp)\n                )\n            }\n            \n            item {\n                Row(\n                    modifier \u003d Modifier.fillMaxWidth(),\n                    horizontalArrangement \u003d Arrangement.spacedBy(8.dp)\n                ) {\n                    Button(\n                        onClick \u003d onNavigateToInvoices,\n                        modifier \u003d Modifier.weight(1f)\n                    ) {\n                        Icon(Icons.AutoMirrored.Filled.ReceiptLong, contentDescription \u003d null)\n                        Spacer(modifier \u003d Modifier.width(8.dp))\n                        Text(\&quot;Facturas\&quot;)\n                    }\n                    \n                    Button(\n                        onClick \u003d onNavigateToReconciliation,\n                        modifier \u003d Modifier.weight(1f)\n                    ) {\n                        Icon(Icons.Default.Sync, contentDescription \u003d null)\n                        Spacer(modifier \u003d Modifier.width(8.dp))\n                        Text(\&quot;Conciliar\&quot;)\n                    }\n                }\n            }\n            \n            item {\n                Button(\n                    onClick \u003d onNavigateToReports,\n                    modifier \u003d Modifier.fillMaxWidth()\n                ) {\n                    Icon(Icons.Default.BarChart, contentDescription \u003d null)\n                    Spacer(modifier \u003d Modifier.width(8.dp))\n                    Text(\&quot;Ver Reportes\&quot;)\n                }\n            }\n            \n            // Transacciones recientes\n            item {\n                Text(\n                    text \u003d \&quot;Transacciones Recientes\&quot;,\n                    style \u003d MaterialTheme.typography.titleMedium.copy(\n                        fontWeight \u003d FontWeight.SemiBold\n                    ),\n                    modifier \u003d Modifier.padding(bottom \u003d 8.dp)\n                )\n            }\n            \n            // Mostrar resultados de búsqueda o transacciones recientes\n            if (uiState.isSearchActive) {\n                if (uiState.filteredTransactions.isEmpty()) {\n                    item {\n                        Card(\n                            modifier \u003d Modifier.fillMaxWidth(),\n                            shape \u003d RoundedCornerShape(12.dp),\n                            colors \u003d CardDefaults.cardColors(\n                                containerColor \u003d MaterialTheme.colorScheme.surfaceVariant\n                            )\n                        ) {\n                            Column(\n                                modifier \u003d Modifier.padding(16.dp),\n                                horizontalAlignment \u003d Alignment.CenterHorizontally\n                            ) {\n                                Icon(\n                                    imageVector \u003d Icons.Default.SearchOff,\n                                    contentDescription \u003d \&quot;Sin resultados\&quot;,\n                                    modifier \u003d Modifier.size(48.dp),\n                                    tint \u003d MaterialTheme.colorScheme.onSurfaceVariant\n                                )\n                                Spacer(modifier \u003d Modifier.height(8.dp))\n                                Text(\n                                    text \u003d \&quot;No se encontraron transacciones\&quot;,\n                                    style \u003d MaterialTheme.typography.bodyMedium,\n                                    color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n                                )\n                                Text(\n                                    text \u003d \&quot;Intenta con otros términos de búsqueda\&quot;,\n                                    style \u003d MaterialTheme.typography.bodySmall,\n                                    color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n                                )\n                            }\n                        }\n                    }\n                } else {\n                    item {\n                        Text(\n                            text \u003d \&quot;Resultados de búsqueda (${uiState.filteredTransactions.size})\&quot;,\n                            style \u003d MaterialTheme.typography.titleMedium.copy(\n                                fontWeight \u003d FontWeight.SemiBold\n                            ),\n                            modifier \u003d Modifier.padding(bottom \u003d 8.dp)\n                        )\n                    }\n                    \n                    items(uiState.filteredTransactions) { transaction -\u003e\n                        TransactionItem(transaction \u003d transaction)\n                    }\n                }\n            } else {\n                items(uiState.transactions.take(5)) { transaction -\u003e\n                    TransactionItem(transaction \u003d transaction)\n                }\n            }\n                }\n            }\n        }\n        \n        // Dialog para agregar transacción\n        if (showAddDialog) {\n            AddTransactionDialog(\n                onDismiss \u003d { showAddDialog \u003d false },\n                onConfirm \u003d { amount, description, type, category -\u003e\n                    viewModel.addTransaction(description, amount, type, category)\n                    showAddDialog \u003d false\n                }\n            )\n        }\n        \n        // Dialog para buscar transacciones\n        if (showSearchDialog) {\n            SearchTransactionsDialog(\n                currentQuery \u003d uiState.searchQuery,\n                onDismiss \u003d { showSearchDialog \u003d false },\n                onSearch \u003d { query -\u003e\n                    viewModel.searchTransactions(query)\n                    showSearchDialog \u003d false\n                }\n            )\n        }\n    }\n}\n\n@Composable\nprivate fun SummaryItem(label: String, value: String, color: Color) {\n    Column(\n        horizontalAlignment \u003d Alignment.CenterHorizontally\n    ) {\n        Text(\n            text \u003d value,\n            style \u003d MaterialTheme.typography.titleLarge.copy(\n                fontWeight \u003d FontWeight.Bold\n            ),\n            color \u003d color\n        )\n        Text(\n            text \u003d label,\n            style \u003d MaterialTheme.typography.bodySmall,\n            color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n        )\n    }\n}\n\n@Composable\nprivate fun TransactionItem(transaction: FinancialTransaction) {\n    Card(\n        modifier \u003d Modifier.fillMaxWidth(),\n        shape \u003d RoundedCornerShape(12.dp),\n        elevation \u003d CardDefaults.cardElevation(1.dp)\n    ) {\n        Row(\n            modifier \u003d Modifier\n                .fillMaxWidth()\n                .padding(16.dp),\n            verticalAlignment \u003d Alignment.CenterVertically\n        ) {\n            Icon(\n                imageVector \u003d when (transaction.type) {\n                    TransactionType.INCOME -\u003e Icons.AutoMirrored.Filled.TrendingUp\n                    TransactionType.EXPENSE -\u003e Icons.AutoMirrored.Filled.TrendingDown\n                    TransactionType.TRANSFER -\u003e Icons.Default.SwapHoriz\n                },\n                contentDescription \u003d transaction.description,\n                modifier \u003d Modifier.size(24.dp),\n                tint \u003d when (transaction.type) {\n                    TransactionType.INCOME -\u003e MaterialTheme.colorScheme.primary\n                    TransactionType.EXPENSE -\u003e MaterialTheme.colorScheme.error\n                    TransactionType.TRANSFER -\u003e MaterialTheme.colorScheme.tertiary\n                }\n            )\n            \n            Spacer(modifier \u003d Modifier.width(12.dp))\n            \n            Column(\n                modifier \u003d Modifier.weight(1f)\n            ) {\n                Text(\n                    text \u003d transaction.description,\n                    style \u003d MaterialTheme.typography.bodyMedium.copy(\n                        fontWeight \u003d FontWeight.Medium\n                    ),\n                    color \u003d MaterialTheme.colorScheme.onSurface\n                )\n                Text(\n                    text \u003d transaction.category,\n                    style \u003d MaterialTheme.typography.bodySmall,\n                    color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n                )\n            }\n            \n            Text(\n                text \u003d \&quot;${if (transaction.type \u003d\u003d TransactionType.INCOME) \&quot;+\&quot; else \&quot;-\&quot;}${formatCurrency(transaction.amount)}\&quot;,\n                style \u003d MaterialTheme.typography.titleMedium.copy(\n                    fontWeight \u003d FontWeight.Bold\n                ),\n                color \u003d when (transaction.type) {\n                    TransactionType.INCOME -\u003e MaterialTheme.colorScheme.primary\n                    TransactionType.EXPENSE -\u003e MaterialTheme.colorScheme.error\n                    TransactionType.TRANSFER -\u003e MaterialTheme.colorScheme.tertiary\n                }\n            )\n        }\n    }\n}\n\n@Composable\nprivate fun AddTransactionDialog(\n    onDismiss: () -\u003e Unit,\n    onConfirm: (Double, String, TransactionType, String) -\u003e Unit\n) {\n    var amount by remember { mutableStateOf(\&quot;\&quot;) }\n    var description by remember { mutableStateOf(\&quot;\&quot;) }\n    var type by remember { mutableStateOf(TransactionType.INCOME) }\n    var category by remember { mutableStateOf(\&quot;General\&quot;) }\n    \n    AlertDialog(\n        onDismissRequest \u003d onDismiss,\n        title \u003d {\n            Text(\&quot;Nueva Transacción\&quot;)\n        },\n        text \u003d {\n            Column {\n                TextField(\n                    value \u003d description,\n                    onValueChange \u003d { description \u003d it },\n                    label \u003d { Text(\&quot;Descripción\&quot;) },\n                    modifier \u003d Modifier.fillMaxWidth()\n                )\n                \n                Spacer(modifier \u003d Modifier.height(8.dp))\n                \n                TextField(\n                    value \u003d amount,\n                    onValueChange \u003d { amount \u003d it },\n                    label \u003d { Text(\&quot;Monto\&quot;) },\n                    modifier \u003d Modifier.fillMaxWidth()\n                )\n                \n                Spacer(modifier \u003d Modifier.height(8.dp))\n                \n                TextField(\n                    value \u003d category,\n                    onValueChange \u003d { category \u003d it },\n                    label \u003d { Text(\&quot;Categoría\&quot;) },\n                    modifier \u003d Modifier.fillMaxWidth()\n                )\n                \n                Spacer(modifier \u003d Modifier.height(16.dp))\n                \n                Row {\n                    RadioButton(\n                        selected \u003d type \u003d\u003d TransactionType.INCOME,\n                        onClick \u003d { type \u003d TransactionType.INCOME }\n                    )\n                    Text(\&quot;Ingreso\&quot;)\n                    \n                    Spacer(modifier \u003d Modifier.width(16.dp))\n                    \n                    RadioButton(\n                        selected \u003d type \u003d\u003d TransactionType.EXPENSE,\n                        onClick \u003d { type \u003d TransactionType.EXPENSE }\n                    )\n                    Text(\&quot;Gasto\&quot;)\n                }\n            }\n        },\n        confirmButton \u003d {\n            TextButton(\n                onClick \u003d {\n                    if (description.isNotBlank() \u0026\u0026 amount.isNotBlank()) {\n                        amount.toDoubleOrNull()?.let { amountValue -\u003e\n                            if (amountValue \u003e 0) {\n                                onConfirm(amountValue, description, type, category)\n                            }\n                        }\n                    }\n                },\n                enabled \u003d description.isNotBlank() \u0026\u0026 amount.isNotBlank() \u0026\u0026 \n                         amount.toDoubleOrNull()?.let { it \u003e 0 } \u003d\u003d true\n            ) {\n                Text(\&quot;Agregar\&quot;)\n            }\n        },\n        dismissButton \u003d {\n            TextButton(onClick \u003d onDismiss) {\n                Text(\&quot;Cancelar\&quot;)\n            }\n        }\n    )\n}\n\n// Función para generar KPIs dinámicos\nprivate fun getKpiItems(uiState: FinanceUiState, currency: Currency \u003d Currency.COP): List\u003cKpiItem\u003e {\n    val margin \u003d uiState.totalIncome - uiState.totalExpenses\n    val roi \u003d if (uiState.totalExpenses \u003e 0) {\n        ((uiState.totalIncome - uiState.totalExpenses) / uiState.totalExpenses) * 100\n    } else 0.0\n    \n    return listOf(\n        KpiItem(\&quot;Ventas\&quot;, formatCurrency(uiState.totalIncome, currency), Icons.Filled.TrendingUp),\n        KpiItem(\&quot;Gastos\&quot;, formatCurrency(uiState.totalExpenses, currency), Icons.Filled.TrendingDown),\n        KpiItem(\&quot;Margen\&quot;, formatCurrency(margin, currency), Icons.Filled.AttachMoney),\n        KpiItem(\&quot;ROI\&quot;, \&quot;${roi.toInt()}%\&quot;, Icons.Filled.BarChart)\n    )\n}\n\n// Eliminada clase Transaction innecesaria - usar FinancialTransaction del ViewModel\n\n@Composable\nprivate fun SearchTransactionsDialog(\n    currentQuery: String,\n    onDismiss: () -\u003e Unit,\n    onSearch: (String) -\u003e Unit\n) {\n    var searchQuery by remember { mutableStateOf(currentQuery) }\n    \n    AlertDialog(\n        onDismissRequest \u003d onDismiss,\n        title \u003d {\n            Text(\&quot;Buscar Transacciones\&quot;)\n        },\n        text \u003d {\n            Column {\n                TextField(\n                    value \u003d searchQuery,\n                    onValueChange \u003d { searchQuery \u003d it },\n                    label \u003d { Text(\&quot;Término de búsqueda\&quot;) },\n                    placeholder \u003d { Text(\&quot;Descripción, categoría, monto...\&quot;) },\n                    modifier \u003d Modifier.fillMaxWidth(),\n                    singleLine \u003d true,\n                    leadingIcon \u003d {\n                        Icon(\n                            imageVector \u003d Icons.Default.Search,\n                            contentDescription \u003d \&quot;Buscar\&quot;\n                        )\n                    }\n                )\n                \n                Spacer(modifier \u003d Modifier.height(8.dp))\n                \n                Text(\n                    text \u003d \&quot;Busca por: descripción, categoría, monto, referencia o notas\&quot;,\n                    style \u003d MaterialTheme.typography.bodySmall,\n                    color \u003d MaterialTheme.colorScheme.onSurfaceVariant\n                )\n            }\n        },\n        confirmButton \u003d {\n            TextButton(\n                onClick \u003d { onSearch(searchQuery) },\n                enabled \u003d searchQuery.isNotBlank()\n            ) {\n                Text(\&quot;Buscar\&quot;)\n            }\n        },\n        dismissButton \u003d {\n            TextButton(onClick \u003d onDismiss) {\n                Text(\&quot;Cancelar\&quot;)\n            }\n        }\n    )\n}\n\n// Previews para Android Studio\n@Preview(showBackground \u003d true, name \u003d \&quot;Finance Screen Preview\&quot;)\n@Composable\nfun FinanceScreenPreview() {\n    MaterialTheme {\n        FinanceScreen(\n            onNavigateToInvoices \u003d {},\n            onNavigateToReconciliation \u003d {},\n            onNavigateToReports \u003d {}\n        )\n    }\n}\n\n// Preview eliminado - usar FinancialTransaction real\n&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;&quot;}],&quot;tool_calls&quot;:[{&quot;id&quot;:&quot;call_fWTpg5A7Qrfkfwjg2EJvhvF5&quot;,&quot;type&quot;:&quot;function&quot;,&quot;function&quot;:{&quot;name&quot;:&quot;edit_file&quot;,&quot;arguments&quot;:&quot;{\&quot;target_file\&quot;:\&quot;app/src/main/java/com/example/orbisai/screens/FinanceScreen.kt\&quot;,\&quot;instructions\&quot;:\&quot;Voy a crear un ViewModel de prueba para Compose Preview y modificar la función FinanceScreenPreview para evitar el uso de hiltViewModel y fuentes de datos reales, asegurando que Compose Preview funcione sin errores DI.\&quot;,\&quot;code_edit\&quot;:\&quot;// ... existing code ...\\n// \u003d\u003d\u003d\u003d Fake ViewModel Para Preview \u003d\u003d\u003d\u003d\\nimport androidx.compose.runtime.collectAsState\\nimport androidx.lifecycle.ViewModel\\nimport kotlinx.coroutines.flow.MutableStateFlow\\nimport kotlinx.coroutines.flow.StateFlow\\n\\nclass FakeFinanceViewModel : ViewModel() {\\n    private val _uiState \u003d MutableStateFlow(\\n        com.example.orbisai.viewmodels.FinanceUiState(\\n            transactions \u003d listOf(\\n                FinancialTransaction(\\n                    id \u003d 1L,\\n                    description \u003d \\\&quot;Venta de proyecto web\\\&quot;,\\n                    amount \u003d 5000.0,\\n                    type \u003d TransactionType.INCOME,\\n                    category \u003d \\\&quot;Ventas\\\&quot;,\\n                    date \u003d java.util.Date()\\n                ),\\n                FinancialTransaction(\\n                    id \u003d 2L,\\n                    description \u003d \\\&quot;Pago de nómina\\\&quot;,\\n                    amount \u003d 3200.0,\\n                    type \u003d TransactionType.EXPENSE,\\n                    category \u003d \\\&quot;Personal\\\&quot;,\\n                    date \u003d java.util.Date()\\n                )\\n            ),\\n            totalIncome \u003d 5000.0,\\n            totalExpenses \u003d 3200.0,\\n            balance \u003d 1800.0\\n        )\\n    )\\n    val uiState: StateFlow\u003ccom.example.orbisai.viewmodels.FinanceUiState\u003e \u003d _uiState\\n}\\n// ... existing code ...\\n@Preview(showBackground \u003d true, name \u003d \\\&quot;Finance Screen Preview\\\&quot;)\\n@Composable\\nfun FinanceScreenPreview() {\\n    MaterialTheme {\\n        FinanceScreen(\\n            viewModel \u003d FakeFinanceViewModel(), // Usamos el ViewModel de prueba\\n            onNavigateToInvoices \u003d {},\\n            onNavigateToReconciliation \u003d {},\\n            onNavigateToReports \u003d {}\\n        )\\n    }\\n}\\n// ... existing code ...\&quot;}&quot;}}]},{&quot;role&quot;:&quot;tool&quot;,&quot;name&quot;:&quot;edit_file&quot;,&quot;tool_call_id&quot;:&quot;call_fWTpg5A7Qrfkfwjg2EJvhvF5&quot;,&quot;content&quot;:&quot;The apply model made the following changes to the file:\n\n```\n@@ -673,4 +673,39 @@\n }\n \n+// Fake ViewModel Para Preview\n+import androidx.compose.runtime.collectAsState\n+import androidx.lifecycle.ViewModel\n+import kotlinx.coroutines.flow.MutableStateFlow\n+import kotlinx.coroutines.flow.StateFlow\n+\n+class FakeFinanceViewModel : ViewModel() {\n+    private val _uiState \u003d MutableStateFlow(\n+        com.example.orbisai.viewmodels.FinanceUiState(\n+            transactions \u003d listOf(\n+                FinancialTransaction(\n+                    id \u003d 1L,\n+                    description \u003d \&quot;Venta de proyecto web\&quot;,\n+                    amount \u003d 5000.0,\n+                    type \u003d TransactionType.INCOME,\n+                    category \u003d \&quot;Ventas\&quot;,\n+                    date \u003d java.util.Date()\n+                ),\n+                FinancialTransaction(\n+                    id \u003d 2L,\n+                    description \u003d \&quot;Pago de nómina\&quot;,\n+                    amount \u003d 3200.0,\n+                    type \u003d TransactionType.EXPENSE,\n+                    category \u003d \&quot;Personal\&quot;,\n+                    date \u003d java.util.Date()\n+                )\n+            ),\n+            totalIncome \u003d 5000.0,\n+            totalExpenses \u003d 3200.0,\n+            balance \u003d 1800.0\n+        )\n+    )\n+    val uiState: StateFlow\u003ccom.example.orbisai.viewmodels.FinanceUiState\u003e \u003d _uiState\n+}\n+\n // Previews para Android Studio\n @Preview(showBackground \u003d true, name \u003d \&quot;Finance Screen Preview\&quot;)\n@@ -679,4 +714,5 @@\n     MaterialTheme {\n         FinanceScreen(\n+            viewModel \u003d FakeFinanceViewModel(),\n             onNavigateToInvoices \u003d {},\n             onNavigateToReconciliation \u003d {},\n@@ -686,4 +722,2 @@\n }\n \n-// Preview eliminado - usar FinancialTransaction real\n-\n```\n\nThe edit introduced the following new linter errors:\n\n```\nLine 716: Constructing a view model in a composable\nLine 673: imports are only allowed in the beginning of file\nLine 716: Argument type mismatch: actual type is \u0027FakeFinanceViewModel\u0027, but \u0027FinanceViewModel\u0027 was expected.\n```\n\nPlease fix the linter errors if it is clear how to. Do not make uneducated guesses.&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;&quot;}],&quot;tool_calls&quot;:[{&quot;id&quot;:&quot;call_J8Pp1T6S18drRfOPJNR5lFwY&quot;,&quot;type&quot;:&quot;function&quot;,&quot;function&quot;:{&quot;name&quot;:&quot;edit_file&quot;,&quot;arguments&quot;:&quot;{\&quot;target_file\&quot;:\&quot;app/src/main/java/com/example/orbisai/screens/FinanceScreen.kt\&quot;,\&quot;instructions\&quot;:\&quot;Voy a corregir los errores de linter: la importación debe ir arriba y el ViewModel debe ser recibido como FinanceViewModel. Reemplazar la clase FakeFinanceViewModel para que extienda FinanceViewModel y la import vaya al inicio.\&quot;,\&quot;code_edit\&quot;:\&quot;// ... existing code ...\\nimport androidx.compose.runtime.collectAsState\\nimport androidx.lifecycle.ViewModel\\nimport kotlinx.coroutines.flow.MutableStateFlow\\nimport kotlinx.coroutines.flow.StateFlow\\n// ... existing code ...\\nclass FakeFinanceViewModel : FinanceViewModel() {\\n    // Sobreescribo el estado internamente para preview\\n    override val uiState: StateFlow\u003ccom.example.orbisai.viewmodels.FinanceUiState\u003e \u003d MutableStateFlow(\\n        com.example.orbisai.viewmodels.FinanceUiState(\\n            transactions \u003d listOf(\\n                FinancialTransaction(\\n                    id \u003d 1L,\\n                    description \u003d \\\&quot;Venta de proyecto web\\\&quot;,\\n                    amount \u003d 5000.0,\\n                    type \u003d TransactionType.INCOME,\\n                    category \u003d \\\&quot;Ventas\\\&quot;,\\n                    date \u003d java.util.Date()\\n                ),\\n                FinancialTransaction(\\n                    id \u003d 2L,\\n                    description \u003d \\\&quot;Pago de nómina\\\&quot;,\\n                    amount \u003d 3200.0,\\n                    type \u003d TransactionType.EXPENSE,\\n                    category \u003d \\\&quot;Personal\\\&quot;,\\n                    date \u003d java.util.Date()\\n                )\\n            ),\\n            totalIncome \u003d 5000.0,\\n            totalExpenses \u003d 3200.0,\\n            balance \u003d 1800.0\\n        )\\n    )\\n}\\n// ... existing code ...\&quot;}&quot;}}]},{&quot;role&quot;:&quot;tool&quot;,&quot;name&quot;:&quot;edit_file&quot;,&quot;tool_call_id&quot;:&quot;call_J8Pp1T6S18drRfOPJNR5lFwY&quot;,&quot;content&quot;:&quot;The apply model made the following changes to the file:\n\n```\n@@ -616,6 +616,38 @@\n }\n \n-// Eliminada clase Transaction innecesaria - usar FinancialTransaction del ViewModel\n+import androidx.compose.runtime.collectAsState\n+import androidx.lifecycle.ViewModel\n+import kotlinx.coroutines.flow.MutableStateFlow\n+import kotlinx.coroutines.flow.StateFlow\n \n+class FakeFinanceViewModel : FinanceViewModel() {\n+    override val uiState: StateFlow\u003ccom.example.orbisai.viewmodels.FinanceUiState\u003e \u003d\n+        MutableStateFlow(\n+            com.example.orbisai.viewmodels.FinanceUiState(\n+                transactions \u003d listOf(\n+                    FinancialTransaction(\n+                        id \u003d 1L,\n+                        description \u003d \&quot;Venta de proyecto web\&quot;,\n+                        amount \u003d 5000.0,\n+                        type \u003d TransactionType.INCOME,\n+                        category \u003d \&quot;Ventas\&quot;,\n+                        date \u003d java.util.Date()\n+                    ),\n+                    FinancialTransaction(\n+                        id \u003d 2L,\n+                        description \u003d \&quot;Pago de nómina\&quot;,\n+                        amount \u003d 3200.0,\n+                        type \u003d TransactionType.EXPENSE,\n+                        category \u003d \&quot;Personal\&quot;,\n+                        date \u003d java.util.Date()\n+                    )\n+                ),\n+                totalIncome \u003d 5000.0,\n+                totalExpenses \u003d 3200.0,\n+                balance \u003d 1800.0\n+            )\n+        )\n+}\n+\n @Composable\n private fun SearchTransactionsDialog(\n@@ -673,39 +705,4 @@\n }\n \n-// Fake ViewModel Para Preview\n-import androidx.compose.runtime.collectAsState\n-import androidx.lifecycle.ViewModel\n-import kotlinx.coroutines.flow.MutableStateFlow\n-import kotlinx.coroutines.flow.StateFlow\n-\n-class FakeFinanceViewModel : ViewModel() {\n-    private val _uiState \u003d MutableStateFlow(\n-        com.example.orbisai.viewmodels.FinanceUiState(\n-            transactions \u003d listOf(\n-                FinancialTransaction(\n-                    id \u003d 1L,\n-                    description \u003d \&quot;Venta de proyecto web\&quot;,\n-                    amount \u003d 5000.0,\n-                    type \u003d TransactionType.INCOME,\n-                    category \u003d \&quot;Ventas\&quot;,\n-                    date \u003d java.util.Date()\n-                ),\n-                FinancialTransaction(\n-                    id \u003d 2L,\n-                    description \u003d \&quot;Pago de nómina\&quot;,\n-                    amount \u003d 3200.0,\n-                    type \u003d TransactionType.EXPENSE,\n-                    category \u003d \&quot;Personal\&quot;,\n-                    date \u003d java.util.Date()\n-                )\n-            ),\n-            totalIncome \u003d 5000.0,\n-            totalExpenses \u003d 3200.0,\n-            balance \u003d 1800.0\n-        )\n-    )\n-    val uiState: StateFlow\u003ccom.example.orbisai.viewmodels.FinanceUiState\u003e \u003d _uiState\n-}\n-\n // Previews para Android Studio\n @Preview(showBackground \u003d true, name \u003d \&quot;Finance Screen Preview\&quot;)\n```\n\nThe edit introduced the following new linter errors:\n\n```\nLine 713: Constructing a view model in a composable\nLine 616: imports are only allowed in the beginning of file\nLine 623: This type is final, so it cannot be extended.\nLine 623: No value passed for parameter \u0027processTransactionUseCase\u0027.\nLine 623: No value passed for parameter \u0027generateFinancialReportUseCase\u0027.\nLine 623: No value passed for parameter \u0027reconcileTransactionsUseCase\u0027.\nLine 623: No value passed for parameter \u0027getInvoicesUseCase\u0027.\nLine 623: No value passed for parameter \u0027insertInvoiceUseCase\u0027.\nLine 623: No value passed for parameter \u0027generateInvoicePdfUseCase\u0027.\nLine 623: No value passed for parameter \u0027exportReconciliationDataUseCase\u0027.\nLine 624: \u0027uiState\u0027 in \u0027FinanceViewModel\u0027 is final and cannot be overridden.\n```\n\nPlease fix the linter errors if it is clear how to. Do not make uneducated guesses.&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;&quot;}],&quot;tool_calls&quot;:[{&quot;id&quot;:&quot;call_HsDyA6NfQBhrptdfZUvo74SZ&quot;,&quot;type&quot;:&quot;function&quot;,&quot;function&quot;:{&quot;name&quot;:&quot;edit_file&quot;,&quot;arguments&quot;:&quot;{\&quot;target_file\&quot;:\&quot;app/src/main/java/com/example/orbisai/screens/FinanceScreen.kt\&quot;,\&quot;instructions\&quot;:\&quot;Colocar la definición de FakeFinanceViewModel al inicio con los imports, y definirlo como una clase separada que solo proporciona una propiedad uiState (no hereda de FinanceViewModel). Modificar FinanceScreen para aceptar cualquier objeto que proporcione uiState: StateFlow\u003cFinanceUiState\u003e para preview. Modificar FinanceScreenPreview para pasar un FakeFinanceViewModel con su propio StateFlow. Así evitamos herencia imposible y los linter errors.\&quot;,\&quot;code_edit\&quot;:\&quot;// ... existing code ...\\nimport androidx.compose.runtime.collectAsState\\nimport androidx.lifecycle.ViewModel\\nimport kotlinx.coroutines.flow.MutableStateFlow\\nimport kotlinx.coroutines.flow.StateFlow\\nimport com.example.orbisai.viewmodels.FinanceUiState\\n// ... existing code ...\\n// Fake ViewModel para Preview (NO hereda)\\nclass FakeFinanceViewModel {\\n    val uiState: StateFlow\u003cFinanceUiState\u003e \u003d MutableStateFlow(\\n        FinanceUiState(\\n            transactions \u003d listOf(\\n                FinancialTransaction(\\n                    id \u003d 1L,\\n                    description \u003d \\\&quot;Venta de proyecto web\\\&quot;,\\n                    amount \u003d 5000.0,\\n                    type \u003d TransactionType.INCOME,\\n                    category \u003d \\\&quot;Ventas\\\&quot;,\\n                    date \u003d java.util.Date()\\n                ),\\n                FinancialTransaction(\\n                    id \u003d 2L,\\n                    description \u003d \\\&quot;Pago de nómina\\\&quot;,\\n                    amount \u003d 3200.0,\\n                    type \u003d TransactionType.EXPENSE,\\n                    category \u003d \\\&quot;Personal\\\&quot;,\\n                    date \u003d java.util.Date()\\n                )\\n            ),\\n            totalIncome \u003d 5000.0,\\n            totalExpenses \u003d 3200.0,\\n            balance \u003d 1800.0\\n        )\\n    )\\n}\\n// ... existing code ...\\n@OptIn(ExperimentalMaterial3Api::class)\\n@Composable\\nfun FinanceScreen(\\n    modifier: Modifier \u003d Modifier,\\n    // Para preview se puede pasar cualquier UIState\\n    viewModel: Any? \u003d null, // usar Any/Fake para permitir preview\\n    onNavigateToInvoices: () -\u003e Unit \u003d {},\\n    onNavigateToReconciliation: () -\u003e Unit \u003d {},\\n    onNavigateToReports: () -\u003e Unit \u003d {}\\n) {\\n    val uiState \u003d when (viewModel) {\\n        is FinanceViewModel -\u003e viewModel.uiState.collectAsStateWithLifecycle().value\\n        is FakeFinanceViewModel -\u003e viewModel.uiState.collectAsState().value\\n        else -\u003e FinanceUiState()\\n    }\\n    var showAddDialog by remember { mutableStateOf(false) }\\n    var showSearchDialog by remember { mutableStateOf(false) }\\n// ... existing code ...\\n@Preview(showBackground \u003d true, name \u003d \\\&quot;Finance Screen Preview\\\&quot;)\\n@Composable\\nfun FinanceScreenPreview() {\\n    MaterialTheme {\\n        FinanceScreen(\\n            viewModel \u003d FakeFinanceViewModel(),\\n            onNavigateToInvoices \u003d {},\\n            onNavigateToReconciliation \u003d {},\\n            onNavigateToReports \u003d {}\\n        )\\n    }\\n}\\n// ... existing code ...\&quot;}&quot;}}]},{&quot;role&quot;:&quot;tool&quot;,&quot;name&quot;:&quot;edit_file&quot;,&quot;tool_call_id&quot;:&quot;call_HsDyA6NfQBhrptdfZUvo74SZ&quot;,&quot;content&quot;:&quot;The apply model made the following changes to the file:\n\n```\n@@ -71,4 +71,5 @@\n import com.example.orbisai.viewmodels.FinanceUiState\n import com.example.orbisai.viewmodels.FinanceViewModel\n+import kotlinx.coroutines.flow.StateFlow\n \n // Data class para KPIs dinámicos\n@@ -92,14 +93,51 @@\n }\n \n+import androidx.compose.runtime.collectAsState\n+import androidx.lifecycle.ViewModel\n+import kotlinx.coroutines.flow.MutableStateFlow\n+\n+class FakeFinanceViewModel {\n+    val uiState: StateFlow\u003cFinanceUiState\u003e \u003d MutableStateFlow(\n+        FinanceUiState(\n+            transactions \u003d listOf(\n+                FinancialTransaction(\n+                    id \u003d 1L,\n+                    description \u003d \&quot;Venta de proyecto web\&quot;,\n+                    amount \u003d 5000.0,\n+                    type \u003d TransactionType.INCOME,\n+                    category \u003d \&quot;Ventas\&quot;,\n+                    date \u003d java.util.Date()\n+                ),\n+                FinancialTransaction(\n+                    id \u003d 2L,\n+                    description \u003d \&quot;Pago de nómina\&quot;,\n+                    amount \u003d 3200.0,\n+                    type \u003d TransactionType.EXPENSE,\n+                    category \u003d \&quot;Personal\&quot;,\n+                    date \u003d java.util.Date()\n+                )\n+            ),\n+            totalIncome \u003d 5000.0,\n+            totalExpenses \u003d 3200.0,\n+            balance \u003d 1800.0\n+        )\n+    )\n+}\n+\n @OptIn(ExperimentalMaterial3Api::class)\n @Composable\n fun FinanceScreen(\n-    modifier: Modifier \u003d Modifier, \n-    viewModel: FinanceViewModel \u003d hiltViewModel(),\n+    modifier: Modifier \u003d Modifier,\n+    // Para preview se puede pasar cualquier UIState\n+    viewModel: Any? \u003d null, // usar Any/Fake para permitir preview\n     onNavigateToInvoices: () -\u003e Unit \u003d {},\n     onNavigateToReconciliation: () -\u003e Unit \u003d {},\n     onNavigateToReports: () -\u003e Unit \u003d {}\n ) {\n-    val uiState by viewModel.uiState.collectAsStateWithLifecycle()\n+    val uiState \u003d when (viewModel) {\n+        is FinanceViewModel -\u003e viewModel.uiState.collectAsStateWithLifecycle().value\n+        is FakeFinanceViewModel -\u003e viewModel.uiState.collectAsState().value\n+        else -\u003e FinanceUiState()\n+    }\n     var showAddDialog by remember { mutableStateOf(false) }\n     var showSearchDialog by remember { mutableStateOf(false) }\n@@ -121,5 +159,5 @@\n                     // Mostrar indicador de búsqueda activa\n                     if (uiState.isSearchActive) {\n-                        IconButton(onClick \u003d { viewModel.clearSearch() }) {\n+                        IconButton(onClick \u003d { /*viewModel.clearSearch()*/ }) {\n                             Icon(\n                                 imageVector \u003d Icons.Default.Clear,\n@@ -186,5 +224,5 @@\n                     )\n                     Spacer(modifier \u003d Modifier.height(16.dp))\n-                    Button(onClick \u003d { viewModel.refreshData() }) {\n+                    Button(onClick \u003d { /*viewModel.refreshData()*/ }) {\n                         Text(\&quot;Reintentar\&quot;)\n                     }\n@@ -202,6 +240,6 @@\n             item {\n                 TestInfoCard(\n-                    onAddTestTransaction \u003d { viewModel.addTestTransaction() },\n-                    onClearData \u003d { viewModel.clearAllData() }\n+                    onAddTestTransaction \u003d { /*viewModel.addTestTransaction()*/ },\n+                    onClearData \u003d { /*viewModel.clearAllData()*/ }\n                 )\n             }\n@@ -403,5 +441,4 @@\n                     TransactionItem(transaction \u003d transaction)\n                 }\n-            }\n                 }\n             }\n@@ -413,5 +450,5 @@\n                 onDismiss \u003d { showAddDialog \u003d false },\n                 onConfirm \u003d { amount, description, type, category -\u003e\n-                    viewModel.addTransaction(description, amount, type, category)\n+                    /*viewModel.addTransaction(description, amount, type, category)*/\n                     showAddDialog \u003d false\n                 }\n@@ -425,5 +462,5 @@\n                 onDismiss \u003d { showSearchDialog \u003d false },\n                 onSearch \u003d { query -\u003e\n-                    viewModel.searchTransactions(query)\n+                    /*viewModel.searchTransactions(query)*/\n                     showSearchDialog \u003d false\n                 }\n@@ -616,38 +653,4 @@\n }\n \n-import androidx.compose.runtime.collectAsState\n-import androidx.lifecycle.ViewModel\n-import kotlinx.coroutines.flow.MutableStateFlow\n-import kotlinx.coroutines.flow.StateFlow\n-\n-class FakeFinanceViewModel : FinanceViewModel() {\n-    override val uiState: StateFlow\u003ccom.example.orbisai.viewmodels.FinanceUiState\u003e \u003d\n-        MutableStateFlow(\n-            com.example.orbisai.viewmodels.FinanceUiState(\n-                transactions \u003d listOf(\n-                    FinancialTransaction(\n-                        id \u003d 1L,\n-                        description \u003d \&quot;Venta de proyecto web\&quot;,\n-                        amount \u003d 5000.0,\n-                        type \u003d TransactionType.INCOME,\n-                        category \u003d \&quot;Ventas\&quot;,\n-                        date \u003d java.util.Date()\n-                    ),\n-                    FinancialTransaction(\n-                        id \u003d 2L,\n-                        description \u003d \&quot;Pago de nómina\&quot;,\n-                        amount \u003d 3200.0,\n-                        type \u003d TransactionType.EXPENSE,\n-                        category \u003d \&quot;Personal\&quot;,\n-                        date \u003d java.util.Date()\n-                    )\n-                ),\n-                totalIncome \u003d 5000.0,\n-                totalExpenses \u003d 3200.0,\n-                balance \u003d 1800.0\n-            )\n-        )\n-}\n-\n @Composable\n private fun SearchTransactionsDialog(\n```\n\nThe edit introduced the following new linter errors:\n\n```\nLine 711: Preview must be a top level declaration or in a top level class with a default constructor.\nLine 93: imports are only allowed in the beginning of file\nLine 468: Expecting \u0027-\u003e\u0027\nLine 722: Expecting \u0027}\u0027\nLine 278: Unresolved reference \u0027SummaryItem\u0027.\nLine 283: Unresolved reference \u0027SummaryItem\u0027.\nLine 288: Unresolved reference \u0027SummaryItem\u0027.\nLine 321: Unresolved reference \u0027getKpiItems\u0027.\nLine 323: Unresolved reference \u0027title\u0027.\nLine 324: Unresolved reference \u0027icon\u0027.\nLine 325: Unresolved reference \u0027value\u0027.\nLine 436: Unresolved reference \u0027TransactionItem\u0027.\nLine 441: Unresolved reference \u0027TransactionItem\u0027.\nLine 231: \u0027else\u0027 entry must be the last one in a \u0027when\u0027 expression.\nLine 449: Unresolved reference \u0027AddTransactionDialog\u0027.\nLine 451: Cannot infer type for this parameter. Specify it explicitly.\nLine 451: Cannot infer type for this parameter. Specify it explicitly.\nLine 451: Cannot infer type for this parameter. Specify it explicitly.\nLine 451: Cannot infer type for this parameter. Specify it explicitly.\nLine 448: \u0027if\u0027 must have both main and \u0027else\u0027 branches when used as an expression.\nLine 460: Unresolved reference \u0027SearchTransactionsDialog\u0027.\nLine 463: Cannot infer type for this parameter. Specify it explicitly.\nLine 459: Unresolved reference \u0027invoke\u0027.\nLine 459: The feature \&quot;when guards\&quot; is experimental and should be enabled explicitly. This can be done by supplying the compiler argument \u0027-Xwhen-guards\u0027, but note that no stability guarantees are provided.\nLine 459: Guard statements are only allowed in \u0027when\u0027 with subject.\nLine 473: Modifier \u0027private\u0027 is not applicable to \u0027local function\u0027.\nLine 493: Modifier \u0027private\u0027 is not applicable to \u0027local function\u0027.\nLine 555: Modifier \u0027private\u0027 is not applicable to \u0027local function\u0027.\nLine 641: Modifier \u0027private\u0027 is not applicable to \u0027local function\u0027.\nLine 656: Modifier \u0027private\u0027 is not applicable to \u0027local function\u0027.\n```\n\nPlease fix the linter errors if it is clear how to. Do not make uneducated guesses.&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;&quot;}],&quot;tool_calls&quot;:[{&quot;id&quot;:&quot;call_rdlccuFM8hjvnOuYOSzyL7wJ&quot;,&quot;type&quot;:&quot;function&quot;,&quot;function&quot;:{&quot;name&quot;:&quot;edit_file&quot;,&quot;arguments&quot;:&quot;{\&quot;target_file\&quot;:\&quot;app/src/main/java/com/example/orbisai/screens/FinanceScreen.kt\&quot;,\&quot;instructions\&quot;:\&quot;Solucionar los errores de declaración local y de preview, mover la definición de FakeFinanceViewModel y FinanceScreenPreview al inicio, dejar imports arriba y restaurar la firma original de FinanceScreen con FinanceViewModel? para producción. En el preview, usar una versión \u0027uiState\u0027 dummy y un FinanceScreen \u0027wrapper\u0027 para la preview, sin tocar la lógica principal de la pantalla. También restaurar los composables y sus parámetros correctamente.\&quot;,\&quot;code_edit\&quot;:\&quot;// ... existing code ...\\nimport kotlinx.coroutines.flow.MutableStateFlow\\nimport kotlinx.coroutines.flow.StateFlow\\n// ... existing code ...\\n// Fake datos para preview Compose\\nprivate val previewUiState: FinanceUiState \u003d FinanceUiState(\\n    transactions \u003d listOf(\\n        FinancialTransaction(\\n            id \u003d 1L,\\n            description \u003d \\\&quot;Venta de proyecto web\\\&quot;,\\n            amount \u003d 5000.0,\\n            type \u003d TransactionType.INCOME,\\n            category \u003d \\\&quot;Ventas\\\&quot;,\\n            date \u003d java.util.Date()\\n        ),\\n        FinancialTransaction(\\n            id \u003d 2L,\\n            description \u003d \\\&quot;Pago de nómina\\\&quot;,\\n            amount \u003d 3200.0,\\n            type \u003d TransactionType.EXPENSE,\\n            category \u003d \\\&quot;Personal\\\&quot;,\\n            date \u003d java.util.Date()\\n        )\\n    ),\\n    totalIncome \u003d 5000.0,\\n    totalExpenses \u003d 3200.0,\\n    balance \u003d 1800.0\\n)\\n\\n// Composable para preview: sólo recibe el estado\\n@Composable\\nprivate fun FinanceScreenPreviewContent(uiState: FinanceUiState) {\\n    MaterialTheme {\\n        // Aquí replica la UI principal pero usando uiState dummy directo.\\n        // Puedes copiar el contenido visual de FinanceScreen reutilizando los sub-componentes.\\n        LazyColumn(\\n            modifier \u003d Modifier.fillMaxSize().padding(16.dp),\\n            contentPadding \u003d PaddingValues(16.dp),\\n            verticalArrangement \u003d Arrangement.spacedBy(16.dp)\\n        ) {\\n            item {\\n                Text(text \u003d \\\&quot;Preview: Resumen Financiero\\\&quot;, style \u003d MaterialTheme.typography.titleLarge)\\n            }\\n            item {\\n                Row(\\n                    modifier \u003d Modifier.fillMaxWidth(),\\n                    horizontalArrangement \u003d Arrangement.SpaceBetween\\n                ) {\\n                    SummaryItem(label \u003d \\\&quot;Ingresos\\\&quot;, value \u003d formatCurrency(uiState.totalIncome), color \u003d MaterialTheme.colorScheme.primary)\\n                    SummaryItem(label \u003d \\\&quot;Gastos\\\&quot;, value \u003d formatCurrency(uiState.totalExpenses), color \u003d MaterialTheme.colorScheme.error)\\n                    SummaryItem(label \u003d \\\&quot;Balance\\\&quot;, value \u003d formatCurrency(uiState.balance), color \u003d MaterialTheme.colorScheme.tertiary)\\n                }\\n            }\\n            item {\\n                Text(\\\&quot;Transacciones Ejemplo\\\&quot;, style \u003d MaterialTheme.typography.titleMedium)\\n            }\\n            items(uiState.transactions) { transaction -\u003e\\n                TransactionItem(transaction)\\n            }\\n        }\\n    }\\n}\\n\\n@Preview(showBackground \u003d true, name \u003d \\\&quot;Finance Screen Preview\\\&quot;)\\n@Composable\\nfun FinanceScreenPreview() {\\n    FinanceScreenPreviewContent(previewUiState)\\n}\\n// ... existing code ...\\n@OptIn(ExperimentalMaterial3Api::class)\\n@Composable\\nfun FinanceScreen(\\n    modifier: Modifier \u003d Modifier,\\n    viewModel: FinanceViewModel \u003d hiltViewModel(),\\n    onNavigateToInvoices: () -\u003e Unit \u003d {},\\n    onNavigateToReconciliation: () -\u003e Unit \u003d {},\\n    onNavigateToReports: () -\u003e Unit \u003d {}\\n) {\\n    val uiState by viewModel.uiState.collectAsStateWithLifecycle()\\n    var showAddDialog by remember { mutableStateOf(false) }\\n    var showSearchDialog by remember { mutableStateOf(false) }\\n// ... existing code ...\&quot;}&quot;}}]},{&quot;role&quot;:&quot;tool&quot;,&quot;name&quot;:&quot;edit_file&quot;,&quot;tool_call_id&quot;:&quot;call_rdlccuFM8hjvnOuYOSzyL7wJ&quot;,&quot;content&quot;:&quot;The apply model made the following changes to the file:\n\n```\n@@ -125,19 +125,89 @@\n }\n \n+private val previewUiState: FinanceUiState \u003d FinanceUiState(\n+    transactions \u003d listOf(\n+        FinancialTransaction(\n+            id \u003d 1L,\n+            description \u003d \&quot;Venta de proyecto web\&quot;,\n+            amount \u003d 5000.0,\n+            type \u003d TransactionType.INCOME,\n+            category \u003d \&quot;Ventas\&quot;,\n+            date \u003d java.util.Date()\n+        ),\n+        FinancialTransaction(\n+            id \u003d 2L,\n+            description \u003d \&quot;Pago de nómina\&quot;,\n+            amount \u003d 3200.0,\n+            type \u003d TransactionType.EXPENSE,\n+            category \u003d \&quot;Personal\&quot;,\n+            date \u003d java.util.Date()\n+        )\n+    ),\n+    totalIncome \u003d 5000.0,\n+    totalExpenses \u003d 3200.0,\n+    balance \u003d 1800.0\n+)\n+\n+// Composable para preview: sólo recibe el estado\n+@Composable\n+private fun FinanceScreenPreviewContent(uiState: FinanceUiState) {\n+    MaterialTheme {\n+        // Aquí replica la UI principal pero usando uiState dummy directo.\n+        // Puedes copiar el contenido visual de FinanceScreen reutilizando los sub-componentes.\n+        LazyColumn(\n+            modifier \u003d Modifier\n+                .fillMaxSize()\n+                .padding(16.dp),\n+            contentPadding \u003d PaddingValues(16.dp),\n+            verticalArrangement \u003d Arrangement.spacedBy(16.dp)\n+        ) {\n+            item {\n+                Text(\n+                    text \u003d \&quot;Preview: Resumen Financiero\&quot;,\n+                    style \u003d MaterialTheme.typography.titleLarge\n+                )\n+            }\n+            item {\n+                Row(\n+                    modifier \u003d Modifier.fillMaxWidth(),\n+                    horizontalArrangement \u003d Arrangement.SpaceBetween\n+                ) {\n+                    SummaryItem(\n+                        label \u003d \&quot;Ingresos\&quot;,\n+                        value \u003d formatCurrency(uiState.totalIncome),\n+                        color \u003d MaterialTheme.colorScheme.primary\n+                    )\n+                    SummaryItem(\n+                        label \u003d \&quot;Gastos\&quot;,\n+                        value \u003d formatCurrency(uiState.totalExpenses),\n+                        color \u003d MaterialTheme.colorScheme.error\n+                    )\n+                    SummaryItem(\n+                        label \u003d \&quot;Balance\&quot;,\n+                        value \u003d formatCurrency(uiState.balance),\n+                        color \u003d MaterialTheme.colorScheme.tertiary\n+                    )\n+                }\n+            }\n+            item {\n+                Text(\&quot;Transacciones Ejemplo\&quot;, style \u003d MaterialTheme.typography.titleMedium)\n+            }\n+            items(uiState.transactions) { transaction -\u003e\n+                TransactionItem(transaction)\n+            }\n+        }\n+    }\n+}\n+\n @OptIn(ExperimentalMaterial3Api::class)\n @Composable\n fun FinanceScreen(\n     modifier: Modifier \u003d Modifier,\n-    // Para preview se puede pasar cualquier UIState\n-    viewModel: Any? \u003d null, // usar Any/Fake para permitir preview\n+    viewModel: FinanceViewModel \u003d hiltViewModel(),\n     onNavigateToInvoices: () -\u003e Unit \u003d {},\n     onNavigateToReconciliation: () -\u003e Unit \u003d {},\n     onNavigateToReports: () -\u003e Unit \u003d {}\n ) {\n-    val uiState \u003d when (viewModel) {\n-        is FinanceViewModel -\u003e viewModel.uiState.collectAsStateWithLifecycle().value\n-        is FakeFinanceViewModel -\u003e viewModel.uiState.collectAsState().value\n-        else -\u003e FinanceUiState()\n-    }\n+    val uiState by viewModel.uiState.collectAsStateWithLifecycle()\n     var showAddDialog by remember { mutableStateOf(false) }\n     var showSearchDialog by remember { mutableStateOf(false) }\n@@ -712,12 +782,5 @@\n @Composable\n fun FinanceScreenPreview() {\n-    MaterialTheme {\n-        FinanceScreen(\n-            viewModel \u003d FakeFinanceViewModel(),\n-            onNavigateToInvoices \u003d {},\n-            onNavigateToReconciliation \u003d {},\n-            onNavigateToReports \u003d {}\n-        )\n-    }\n+    FinanceScreenPreviewContent(previewUiState)\n }\n \n```\n\nThe edit introduced the following new linter errors:\n\n```\nLine 93: imports are only allowed in the beginning of file\nLine 538: Expecting \u0027-\u003e\u0027\nLine 785: Expecting \u0027}\u0027\nLine 175: Unresolved reference \u0027SummaryItem\u0027.\nLine 180: Unresolved reference \u0027SummaryItem\u0027.\nLine 185: Unresolved reference \u0027SummaryItem\u0027.\nLine 196: Unresolved reference \u0027TransactionItem\u0027.\nLine 348: Unresolved reference \u0027SummaryItem\u0027.\nLine 353: Unresolved reference \u0027SummaryItem\u0027.\nLine 358: Unresolved reference \u0027SummaryItem\u0027.\nLine 391: Unresolved reference \u0027getKpiItems\u0027.\nLine 393: Unresolved reference \u0027title\u0027.\nLine 394: Unresolved reference \u0027icon\u0027.\nLine 395: Unresolved reference \u0027value\u0027.\nLine 506: Unresolved reference \u0027TransactionItem\u0027.\nLine 511: Unresolved reference \u0027TransactionItem\u0027.\nLine 301: \u0027else\u0027 entry must be the last one in a \u0027when\u0027 expression.\nLine 519: Unresolved reference \u0027AddTransactionDialog\u0027.\nLine 521: Cannot infer type for this parameter. Specify it explicitly.\nLine 521: Cannot infer type for this parameter. Specify it explicitly.\nLine 521: Cannot infer type for this parameter. Specify it explicitly.\nLine 521: Cannot infer type for this parameter. Specify it explicitly.\nLine 518: \u0027if\u0027 must have both main and \u0027else\u0027 branches when used as an expression.\nLine 530: Unresolved reference \u0027SearchTransactionsDialog\u0027.\nLine 533: Cannot infer type for this parameter. Specify it explicitly.\nLine 529: Unresolved reference \u0027invoke\u0027.\nLine 529: The feature \&quot;when guards\&quot; is experimental and should be enabled explicitly. This can be done by supplying the compiler argument \u0027-Xwhen-guards\u0027, but note that no stability guarantees are provided.\nLine 529: Guard statements are only allowed in \u0027when\u0027 with subject.\nLine 543: Modifier \u0027private\u0027 is not applicable to \u0027local function\u0027.\nLine 563: Modifier \u0027private\u0027 is not applicable to \u0027local function\u0027.\nLine 625: Modifier \u0027private\u0027 is not applicable to \u0027local function\u0027.\nLine 711: Modifier \u0027private\u0027 is not applicable to \u0027local function\u0027.\nLine 726: Modifier \u0027private\u0027 is not applicable to \u0027local function\u0027.\nLine 781: Preview must be a top level declaration or in a top level class with a default constructor.\n```\n\nPlease fix the linter errors if it is clear how to. Do not make uneducated guesses.&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;&quot;}],&quot;tool_calls&quot;:[{&quot;id&quot;:&quot;call_DsgZyJrnmXy9XpfEWfSWs1L4&quot;,&quot;type&quot;:&quot;function&quot;,&quot;function&quot;:{&quot;name&quot;:&quot;edit_file&quot;,&quot;arguments&quot;:&quot;{\&quot;target_file\&quot;:\&quot;app/src/main/java/com/example/orbisai/screens/FinanceScreen.kt\&quot;,\&quot;instructions\&quot;:\&quot;Mover los previews y helpers (SummaryItem, TransactionItem) fuera de otros composables y quitar el modificador private para que sean visibles. Asegurarse de que todo esté declarado a nivel superior y en orden, y dejar imports en la parte superior del archivo. Así se solucionan los errores de preview y referencias.\&quot;,\&quot;code_edit\&quot;:\&quot;// ... existing code ...\\nimport kotlinx.coroutines.flow.MutableStateFlow\\nimport kotlinx.coroutines.flow.StateFlow\\n// ... existing code ...\\n// Helpers para preview y componentes de resumen deben ser de nivel superior\\n\\n@Composable\\nfun SummaryItem(label: String, value: String, color: Color) {\\n    Column(\\n        horizontalAlignment \u003d Alignment.CenterHorizontally\\n    ) {\\n        Text(\\n            text \u003d value,\\n            style \u003d MaterialTheme.typography.titleLarge.copy(\\n                fontWeight \u003d FontWeight.Bold\\n            ),\\n            color \u003d color\\n        )\\n        Text(\\n            text \u003d label,\\n            style \u003d MaterialTheme.typography.bodySmall,\\n            color \u003d MaterialTheme.colorScheme.onSurfaceVariant\\n        )\\n    }\\n}\\n\\n@Composable\\nfun TransactionItem(transaction: FinancialTransaction) {\\n    Card(\\n        modifier \u003d Modifier.fillMaxWidth(),\\n        shape \u003d RoundedCornerShape(12.dp),\\n        elevation \u003d CardDefaults.cardElevation(1.dp)\\n    ) {\\n        Row(\\n            modifier \u003d Modifier\\n                .fillMaxWidth()\\n                .padding(16.dp),\\n            verticalAlignment \u003d Alignment.CenterVertically\\n        ) {\\n            Icon(\\n                imageVector \u003d when (transaction.type) {\\n                    TransactionType.INCOME -\u003e Icons.AutoMirrored.Filled.TrendingUp\\n                    TransactionType.EXPENSE -\u003e Icons.AutoMirrored.Filled.TrendingDown\\n                    TransactionType.TRANSFER -\u003e Icons.Default.SwapHoriz\\n                },\\n                contentDescription \u003d transaction.description,\\n                modifier \u003d Modifier.size(24.dp),\\n                tint \u003d when (transaction.type) {\\n                    TransactionType.INCOME -\u003e MaterialTheme.colorScheme.primary\\n                    TransactionType.EXPENSE -\u003e MaterialTheme.colorScheme.error\\n                    TransactionType.TRANSFER -\u003e MaterialTheme.colorScheme.tertiary\\n                }\\n            )\\n\\n            Spacer(modifier \u003d Modifier.width(12.dp))\\n\\n            Column(\\n                modifier \u003d Modifier.weight(1f)\\n            ) {\\n                Text(\\n                    text \u003d transaction.description,\\n                    style \u003d MaterialTheme.typography.bodyMedium.copy(\\n                        fontWeight \u003d FontWeight.Medium\\n                    ),\\n                    color \u003d MaterialTheme.colorScheme.onSurface\\n                )\\n                Text(\\n                    text \u003d transaction.category,\\n                    style \u003d MaterialTheme.typography.bodySmall,\\n                    color \u003d MaterialTheme.colorScheme.onSurfaceVariant\\n                )\\n            }\\n\\n            Text(\\n                text \u003d \\\&quot;${if (transaction.type \u003d\u003d TransactionType.INCOME) \\\&quot;+\\\&quot; else \\\&quot;-\\\&quot;}${formatCurrency(transaction.amount)}\\\&quot;,\\n                style \u003d MaterialTheme.typography.titleMedium.copy(\\n                    fontWeight \u003d FontWeight.Bold\\n                ),\\n                color \u003d when (transaction.type) {\\n                    TransactionType.INCOME -\u003e MaterialTheme.colorScheme.primary\\n                    TransactionType.EXPENSE -\u003e MaterialTheme.colorScheme.error\\n                    TransactionType.TRANSFER -\u003e MaterialTheme.colorScheme.tertiary\\n                }\\n            )\\n        }\\n    }\\n}\\n// ... existing code ...\&quot;}&quot;}}]},{&quot;role&quot;:&quot;tool&quot;,&quot;name&quot;:&quot;edit_file&quot;,&quot;tool_call_id&quot;:&quot;call_DsgZyJrnmXy9XpfEWfSWs1L4&quot;,&quot;content&quot;:&quot;The apply model made the following changes to the file:\n\n```\n@@ -151,5 +151,5 @@\n // Composable para preview: sólo recibe el estado\n @Composable\n-private fun FinanceScreenPreviewContent(uiState: FinanceUiState) {\n+fun FinanceScreenPreviewContent(uiState: FinanceUiState) {\n     MaterialTheme {\n         // Aquí replica la UI principal pero usando uiState dummy directo.\n@@ -541,5 +541,5 @@\n \n @Composable\n-private fun SummaryItem(label: String, value: String, color: Color) {\n+fun SummaryItem(label: String, value: String, color: Color) {\n     Column(\n         horizontalAlignment \u003d Alignment.CenterHorizontally\n@@ -561,5 +561,5 @@\n \n @Composable\n-private fun TransactionItem(transaction: FinancialTransaction) {\n+fun TransactionItem(transaction: FinancialTransaction) {\n     Card(\n         modifier \u003d Modifier.fillMaxWidth(),\n```\n\nThe edit introduced the following new linter errors:\n\n```\nLine 93: imports are only allowed in the beginning of file\nLine 538: Expecting \u0027-\u003e\u0027\nLine 785: Expecting \u0027}\u0027\nLine 175: Unresolved reference \u0027SummaryItem\u0027.\nLine 180: Unresolved reference \u0027SummaryItem\u0027.\nLine 185: Unresolved reference \u0027SummaryItem\u0027.\nLine 196: Unresolved reference \u0027TransactionItem\u0027.\nLine 348: Unresolved reference \u0027SummaryItem\u0027.\nLine 353: Unresolved reference \u0027SummaryItem\u0027.\nLine 358: Unresolved reference \u0027SummaryItem\u0027.\nLine 391: Unresolved reference \u0027getKpiItems\u0027.\nLine 393: Unresolved reference \u0027title\u0027.\nLine 394: Unresolved reference \u0027icon\u0027.\nLine 395: Unresolved reference \u0027value\u0027.\nLine 506: Unresolved reference \u0027TransactionItem\u0027.\nLine 511: Unresolved reference \u0027TransactionItem\u0027.\nLine 301: \u0027else\u0027 entry must be the last one in a \u0027when\u0027 expression.\nLine 519: Unresolved reference \u0027AddTransactionDialog\u0027.\nLine 521: Cannot infer type for this parameter. Specify it explicitly.\nLine 521: Cannot infer type for this parameter. Specify it explicitly.\nLine 521: Cannot infer type for this parameter. Specify it explicitly.\nLine 521: Cannot infer type for this parameter. Specify it explicitly.\nLine 518: \u0027if\u0027 must have both main and \u0027else\u0027 branches when used as an expression.\nLine 530: Unresolved reference \u0027SearchTransactionsDialog\u0027.\nLine 533: Cannot infer type for this parameter. Specify it explicitly.\nLine 529: Unresolved reference \u0027invoke\u0027.\nLine 529: The feature \&quot;when guards\&quot; is experimental and should be enabled explicitly. This can be done by supplying the compiler argument \u0027-Xwhen-guards\u0027, but note that no stability guarantees are provided.\nLine 529: Guard statements are only allowed in \u0027when\u0027 with subject.\nLine 625: Modifier \u0027private\u0027 is not applicable to \u0027local function\u0027.\nLine 711: Modifier \u0027private\u0027 is not applicable to \u0027local function\u0027.\nLine 726: Modifier \u0027private\u0027 is not applicable to \u0027local function\u0027.\nLine 781: Preview must be a top level declaration or in a top level class with a default constructor.\n```\n\nPlease fix the linter errors if it is clear how to. Do not make uneducated guesses.&quot;}]}" />
      </map>
    </option>
  </component>
</project>